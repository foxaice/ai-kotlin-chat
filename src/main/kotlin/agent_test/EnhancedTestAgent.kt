import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import kotlinx.coroutines.runBlocking
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import java.io.File
import java.io.IOException
import java.time.Duration
import kotlin.system.exitProcess

class EnhancedTestAgent {
    private val httpClient = OkHttpClient.Builder()
        .connectTimeout(Duration.ofSeconds(20))
        .writeTimeout(Duration.ofSeconds(120))
        .readTimeout(Duration.ofSeconds(180))
        .callTimeout(Duration.ofSeconds(0))
        .retryOnConnectionFailure(true)
        .build()

    private val objectMapper: ObjectMapper = jacksonObjectMapper()
    private val geminiApiKey = System.getenv("GEMINI_API_KEY")
        ?: throw IllegalStateException("‚ùå GEMINI_API_KEY environment variable is not set")

    private val geminiApiUrl = "https://generativelanguage.googleapis.com/v1beta/models/$geminiModel:generateContent"

    private val geminiModel: String
        get() {
            return "gemini-2.5-flash"
            return "gemini-2.5-flash-lite"
            return "gemini-2.5-flash-exp"
            return "gemini-2.0-flash"
            return "gemini-2.0-flash-lite"
            return "gemini-2.0-flash-exp"
            return "gemma-3n-e2b-it"
            return "gemma-3n-e4b-it"
            return "gemma-3-1b-it"
            return "gemma-3-4b-it"
            return "gemma-3-12b-it"
            return "gemma-3-27b-it"
        }

    private val deepseekModel: String
        get() {
            return "deepseek-chat"
            return "deepseek-reasoner"
        }

    private val isDebug = false

    private val llmType = LLMType.GEMINI

    private enum class LLMType {
        GEMINI,
        DEEPSEEK
    }

    data class TestResult(
        val success: Boolean,
        val output: String,
        val errors: List<String> = emptyList()
    )

    suspend fun generateTests(
        sourceFilePath: String,
        testFilePath: String,
        maxIterations: Int = 5,
        packageName: String? = null
    ) {
        println("üöÄ Enhanced Test Agent –∑–∞–ø—É—â–µ–Ω")
        println("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath")
        println("üß™ –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤: $testFilePath")
        println("üì¶ –ü–∞–∫–µ—Ç: ${packageName ?: "auto-detect"}")

        val sourceFile = File(sourceFilePath)
        if (!sourceFile.exists()) {
            println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourceFilePath")
            return
        }

        val sourceCode = sourceFile.readText()
        val detectedPackage = packageName ?: detectPackageName(sourceCode)
        val className = extractClassName(sourceCode)

        println("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–ª–∞—Å—Å: $className")
        println("üì¶ –ü–∞–∫–µ—Ç: $detectedPackage")

        var iteration = 1
        var lastError = ""

        while (iteration <= maxIterations) {
            println("\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è $iteration/$maxIterations")

            try {
                val testCode = if (iteration == 1) {
                    generateInitialTests(sourceCode, sourceFilePath, className, detectedPackage)
                } else {
                    val existingTests = File(testFilePath).takeIf { it.exists() }?.readText() ?: ""
                    fixTests(sourceCode, existingTests, lastError, sourceFilePath, className, detectedPackage)
                }

                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                val testFile = File(testFilePath)
                testFile.parentFile?.mkdirs()
                testFile.writeText(testCode)

                println("üìù –¢–µ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: $testFilePath")

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Kotlin
                val syntaxCheck = checkKotlinSyntax(testCode)
                if (!syntaxCheck.success) {
                    println("‚ö†Ô∏è  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:")
                    println(syntaxCheck.output)
                    lastError = syntaxCheck.output
                    iteration++
                    continue
                }

                // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
                val compileResult = compileTest(testFilePath, detectedPackage)
                if (!compileResult.success) {
                    println("‚ö†Ô∏è  –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
                    println(compileResult.output)
                    lastError = compileResult.output
                    iteration++
                    continue
                }

                println("‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã!")

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                val runResult = tryRunTests(testFilePath, className, detectedPackage)
                if (runResult.success) {
                    println("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                } else {
                    println("‚ùå –¢–µ—Å—Ç—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ —É–ø–∞–ª–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:")
                    lastError = "Test execution failed: ${runResult.output}"

                    // –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if (iteration < maxIterations) {
                        println("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã...")
                        iteration++
                        continue
                    }
                }

                return

            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ $iteration: ${e.message}")
                lastError = e.message ?: "Unknown error"
                e.printStackTrace()
            }

            iteration++
        }

        println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —Ç–µ—Å—Ç—ã –∑–∞ $maxIterations –∏—Ç–µ—Ä–∞—Ü–∏–π")
    }

    private suspend fun generateInitialTests(
        sourceCode: String,
        sourceFilePath: String,
        className: String,
        packageName: String
    ): String {
        val prompt = """
–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä JUnit 5 —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ Kotlin –∫–ª–∞—Å—Å–∞.

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π Kotlin –∫–æ–¥ –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath
- –ö–ª–∞—Å—Å: $className
- –ü–∞–∫–µ—Ç: $packageName

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
```kotlin
$sourceCode
```

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–∞–º:
1. –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å: package $packageName
2. –ò—Å–ø–æ–ª—å–∑—É–π JUnit 5 (import org.junit.jupiter.api.*)
3. –ò—Å–ø–æ–ª—å–∑—É–π kotlin.test –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö assertions –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
4. –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∞ ${className}Test
5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–ª–∞—Å—Å: import $packageName.$className
6. –ü–æ–∫—Ä–æ–π –í–°–ï –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
7. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è:
   - –û–±—ã—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
   - –ì—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
   - –û—à–∏–±–æ—á–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   - –ò—Å–∫–ª—é—á–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–π assertThrows)
8. –ò—Å–ø–æ–ª—å–∑—É–π @Test, @BeforeEach, @AfterEach –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
9. –°–æ–∑–¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `method should behavior when condition`
10. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ assertions (assertEquals, assertTrue, assertThrows –∏ —Ç.–¥.)
11. –î–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π delta –≤ assertEquals
12. –î–æ–±–∞–≤—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
13. –í–ê–ñ–ù–û: –î–ª—è Result —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π getOrThrow() –≤–º–µ—Å—Ç–æ getOrNull() –≤ assertions
14. –í–ê–ñ–ù–û: getOrNull() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullable —Ç–∏–ø - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ assertEquals
15. –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Result<T> - –∏—Å–ø–æ–ª—å–∑—É–π result.getOrThrow() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö

–í–µ—Ä–Ω–∏ –∫–æ–¥ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å package declaration, –±–µ–∑ markdown –±–ª–æ–∫–æ–≤.
        """.trimIndent()

        return callModelApi(prompt)
    }

    private suspend fun fixTests(
        sourceCode: String,
        existingTests: String,
        errorOutput: String,
        sourceFilePath: String,
        className: String,
        packageName: String
    ): String {
        val prompt = """
–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ Kotlin —Ç–µ—Å—Ç–∞—Ö.

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Kotlin –∫–æ–¥ –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath
- –ö–ª–∞—Å—Å: $className  
- –ü–∞–∫–µ—Ç: $packageName

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞:
```kotlin
$sourceCode
```

–¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã (—Å –æ—à–∏–±–∫–∞–º–∏):
```kotlin
$existingTests
```

–û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
```
$errorOutput
```

–ò—Å–ø—Ä–∞–≤—å –í–°–ï –æ—à–∏–±–∫–∏:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ
2. –ò—Å–ø—Ä–∞–≤—å package declaration –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
3. –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã (–¥–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ, —É–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ)
4. –ò—Å–ø—Ä–∞–≤—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Kotlin
5. –ò—Å–ø—Ä–∞–≤—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
6. –ò—Å–ø—Ä–∞–≤—å –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
7. –ò—Å–ø—Ä–∞–≤—å assertions - –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
8. –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ $className –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏
9. –î–ª—è assertThrows –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: assertThrows<ExceptionType> { }
10. –î–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –¥–æ–±–∞–≤—å delta –≤ assertEquals
11. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω—ã
12. –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Result.getOrNull() –≤ assertions - –∑–∞–º–µ–Ω–∏ –Ω–∞ getOrThrow() –∏–ª–∏ –¥–æ–±–∞–≤—å null check
13. –í–ê–ñ–ù–û: getOrNull() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullable —Ç–∏–ø, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ assertEquals/assertTrue/assertFalse
14. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ "actual type is 'Type?', but 'Type' was expected" - –∏—Å–ø—Ä–∞–≤—å nullable —Ç–∏–ø—ã
15. –î–ª—è Result —Ç–∏–ø–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π getOrThrow() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ assertNotNull + assertEquals

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å: package $packageName

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –±–ª–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ!
        """.trimIndent()

        return callModelApi(prompt)
    }

    private suspend fun callModelApi(prompt: String): String {
        return when (llmType) {
            LLMType.GEMINI -> callGeminiApi(prompt)
            LLMType.DEEPSEEK -> callDeepSeekChat(prompt, model = deepseekModel)
        }
    }

    private suspend fun callGeminiApi(prompt: String): String {
        val requestBody = mapOf(
            "contents" to listOf(
                mapOf("parts" to listOf(mapOf("text" to prompt)))
            ),
            "generationConfig" to mapOf(
                "temperature" to 0.1,
                "maxOutputTokens" to 8000,
                "topP" to 0.8,
                "topK" to 40
            ),
            "safetySettings" to listOf(
                mapOf("category" to "HARM_CATEGORY_HARASSMENT", "threshold" to "BLOCK_NONE"),
                mapOf("category" to "HARM_CATEGORY_HATE_SPEECH", "threshold" to "BLOCK_NONE"),
                mapOf("category" to "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold" to "BLOCK_NONE"),
                mapOf("category" to "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold" to "BLOCK_NONE")
            )
        )

        val json = objectMapper.writeValueAsString(requestBody)
        val body = json.toRequestBody("application/json".toMediaType())

        val request = Request.Builder()
            .url("$geminiApiUrl?key=$geminiApiKey")
            .post(body)
            .header("Content-Type", "application/json")
            .build()

        httpClient.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "No error details"
                throw IOException("Gemini API error: ${response.code} - ${response.message}\nDetails: $errorBody")
            }

            val responseBody = response.body?.string()
                ?: throw IOException("Empty response from Gemini API")

            try {
                val jsonResponse: JsonNode = objectMapper.readTree(responseBody)

                // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
                val candidates = jsonResponse.path("candidates")
                if (candidates.isEmpty || candidates.isNull) {
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                    val error = jsonResponse.path("error")
                    if (!error.isMissingNode) {
                        val errorMessage = error.path("message").asText("Unknown API error")
                        throw IOException("Gemini API returned error: $errorMessage")
                    }
                    throw IOException("No candidates in API response: $responseBody")
                }

                val firstCandidate = candidates.first()
                if (firstCandidate.isNull) {
                    throw IOException("First candidate is null in API response")
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                val finishReason = firstCandidate.path("finishReason").asText("")
                if (finishReason == "SAFETY") {
                    throw IOException("Content was blocked by safety filters")
                } else if (finishReason == "RECITATION") {
                    throw IOException("Content was blocked due to recitation concerns")
                } else if (finishReason == "OTHER") {
                    println("‚ö†Ô∏è  Warning: API finished with 'OTHER' reason, attempting to extract content")
                }

                val content = firstCandidate.path("content")
                if (content.isNull || content.isMissingNode) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç
                    val text = firstCandidate.path("text").asText("")
                    if (text.isNotBlank()) {
                        return cleanupGeneratedCode(text)
                    }
                    throw IOException("No content in API response candidate")
                }

                val parts = content.path("parts")
                if (parts.isEmpty || parts.isNull) {
                    throw IOException("No parts in API response content")
                }

                // –ò—â–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º
                var extractedText = ""
                for (part in parts) {
                    val text = part.path("text").asText("")
                    if (text.isNotBlank()) {
                        extractedText = text
                        break
                    }
                }

                if (extractedText.isBlank()) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    println("üîç Debug: –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
                    println(responseBody.take(500) + "...")
                    throw IOException("Empty or missing text in all API response parts")
                }

                return cleanupGeneratedCode(extractedText)

            } catch (e: Exception) {
                when (e) {
                    is IOException -> throw e
                    else -> throw IOException(
                        "Failed to parse Gemini API response: ${e.message}\nResponse preview: ${
                            responseBody.take(
                                200
                            )
                        }..."
                    )
                }
            }
        }
    }

    private fun cleanupGeneratedCode(code: String): String {
        var cleaned = code.trim()

        if (isDebug.not()) {
            println("üîç –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            println("${cleaned.take(200)}...")
        } else {
            println("üîç –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM:")
            println(cleaned)
            println("press the Enter key to continue...")
            readlnOrNull()
        }

        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞

        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—â–µ–º kotlin –±–ª–æ–∫–∏
        val kotlinBlockPattern = Regex("```kotlin\\s*\\n(.*?)\\n```", RegexOption.DOT_MATCHES_ALL)
        var match = kotlinBlockPattern.find(cleaned)
        if (match != null) {
            cleaned = match.groupValues[1].trim()
            println("‚úÖ –ù–∞–π–¥–µ–Ω kotlin –±–ª–æ–∫")
        } else {
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò—â–µ–º –ª—é–±—ã–µ code –±–ª–æ–∫–∏
            val codeBlockPattern = Regex("```\\s*\\n(.*?)\\n```", RegexOption.DOT_MATCHES_ALL)
            match = codeBlockPattern.find(cleaned)
            if (match != null) {
                cleaned = match.groupValues[1].trim()
                println("‚úÖ –ù–∞–π–¥–µ–Ω code –±–ª–æ–∫")
            } else {
                // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ò—â–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏
                val inlineKotlinPattern = Regex("```kotlin([^`]*)```", RegexOption.DOT_MATCHES_ALL)
                match = inlineKotlinPattern.find(cleaned)
                if (match != null) {
                    cleaned = match.groupValues[1].trim()
                    println("‚úÖ –ù–∞–π–¥–µ–Ω inline kotlin –±–ª–æ–∫")
                } else {
                    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ç–æ –≤—Å–µ ``` —Å–∏–º–≤–æ–ª—ã
                    if (cleaned.contains("```")) {
                        cleaned = cleaned
                            .replace("```kotlin", "")
                            .replace("```", "")
                            .trim()
                        println("‚úÖ –£–±—Ä–∞–ª–∏ markdown —Ä–∞–∑–º–µ—Ç–∫—É")
                    }
                }
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        cleaned = cleaned
            .split('\n')
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Kotlin –∫–æ–¥
        if (!cleaned.contains("package ") && !cleaned.contains("class ") && !cleaned.contains("fun ")) {
            println("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Kotlin –∫–æ–¥")

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            val lines = cleaned.split('\n')
            val kotlinStartIndex = lines.indexOfFirst {
                it.trim().startsWith("package ") ||
                        it.trim().startsWith("import ") ||
                        it.trim().startsWith("class ")
            }

            if (kotlinStartIndex >= 0) {
                cleaned = lines.drop(kotlinStartIndex).joinToString("\n")
                println("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ $kotlinStartIndex")
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (!cleaned.startsWith("package ")) {
            println("‚ö†Ô∏è  –ö–æ–¥ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å package declaration")
        }

        println("üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–¥ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        println("${cleaned.take(200)}...")

        return cleaned
    }

    private fun checkKotlinSyntax(code: String): TestResult {
        return try {
            val errors = mutableListOf<String>()
            val lines = code.split('\n')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (!code.contains("package ")) {
                errors.add("‚ùå Missing package declaration")
            }

            if (!code.contains("class ") && !code.contains("object ")) {
                errors.add("‚ùå No class or object declaration found")
            }

            if (!code.contains("@Test")) {
                errors.add("‚ùå No test methods found (missing @Test annotations)")
            }

            if (!code.contains("import org.junit.jupiter.api")) {
                errors.add("‚ùå Missing JUnit imports")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            var braceBalance = 0
            var parenBalance = 0

            lines.forEachIndexed { index, line ->
                val trimmed = line.trim()
                if (trimmed.isNotEmpty() && !trimmed.startsWith("//") && !trimmed.startsWith("*")) {

                    // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–±–∫–∏
                    braceBalance += trimmed.count { it == '{' } - trimmed.count { it == '}' }
                    parenBalance += trimmed.count { it == '(' } - trimmed.count { it == ')' }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    if (trimmed.contains("assertThrows(") && !trimmed.contains("assertThrows<")) {
                        errors.add("‚ùå Line ${index + 1}: Incorrect assertThrows syntax, use assertThrows<ExceptionType>")
                    }

                    if (trimmed.contains("assertEquals(") && trimmed.contains("Double") && !trimmed.contains("delta") && !trimmed.contains(
                            "0.0"
                        )
                    ) {
                        errors.add("‚ö†Ô∏è  Line ${index + 1}: Consider using delta for Double assertions")
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å nullable —Ç–∏–ø–∞–º–∏
                    if (trimmed.contains("result.getOrNull()") && trimmed.contains("assertEquals")) {
                        errors.add("‚ùå Line ${index + 1}: result.getOrNull() returns nullable type, use result.getOrThrow() or handle null")
                    }

                    if (trimmed.contains(".getOrNull()") && (trimmed.contains("assertEquals") || trimmed.contains("assertTrue") || trimmed.contains(
                            "assertFalse"
                        ))
                    ) {
                        errors.add("‚ùå Line ${index + 1}: getOrNull() returns nullable type, assertions may fail due to type mismatch")
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "actual type is 'Type?', but 'Type' was expected"
                    if (trimmed.contains("Double?") && trimmed.contains("Double")) {
                        errors.add("‚ùå Line ${index + 1}: Nullable Double? cannot be used where non-null Double is expected")
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Result.getOrNull() –≤ assertions
                    val resultGetOrNullPattern = Regex("assertEquals\\s*\\([^,]+,\\s*[^.]+\\.getOrNull\\(\\)")
                    if (resultGetOrNullPattern.containsMatchIn(trimmed)) {
                        errors.add("‚ùå Line ${index + 1}: Use getOrThrow() instead of getOrNull() in assertEquals, or add null check")
                    }
                }
            }

            if (braceBalance != 0) {
                errors.add("‚ùå Unbalanced braces in code")
            }

            if (parenBalance != 0) {
                errors.add("‚ùå Unbalanced parentheses in code")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–±–ª–µ–º—ã
            if (code.contains("@Test") && !code.contains("fun ")) {
                errors.add("‚ùå Test annotations found but no test functions")
            }

            TestResult(
                success = errors.isEmpty(),
                output = if (errors.isEmpty()) "‚úÖ Syntax validation passed" else errors.joinToString("\n"),
                errors = errors
            )
        } catch (e: Exception) {
            TestResult(false, "‚ùå Syntax check failed: ${e.message}")
        }
    }

    private fun compileTest(testFilePath: String, packageName: String): TestResult {
        return try {
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            val testFile = File(testFilePath)
            if (!testFile.exists()) {
                return TestResult(false, "Test file does not exist: $testFilePath")
            }

            val content = testFile.readText()
            val requiredElements = listOf(
                "package $packageName",
                "import org.junit.jupiter.api.Test",
                "@Test",
                "class "
            )

            val missingElements = requiredElements.filter { !content.contains(it) }

            if (missingElements.isNotEmpty()) {
                return TestResult(false, "Missing required elements: ${missingElements.joinToString(", ")}")
            }

            println("‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            TestResult(true, "Compilation check passed")

        } catch (e: Exception) {
            TestResult(false, "Compilation check failed: ${e.message}")
        }
    }

    private fun tryRunTests(testFilePath: String, className: String, packageName: String): TestResult {
        return try {
            println("üèÉ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏...")

            val testFile = File(testFilePath).absoluteFile
            val projectRoot = findProjectRoot(testFile.parentFile)

            return runTestsWithGradle(projectRoot, className, packageName)
        } catch (e: Exception) {
            TestResult(false, "‚ùå Test execution failed: ${e.message}")
        }
    }

    private fun findProjectRoot(startDir: File?): File {
        var current = startDir ?: File(".")

        while (current.parentFile != null) {
            // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            if (File(current, "build.gradle.kts").exists() ||
                File(current, "build.gradle").exists() ||
                File(current, "pom.xml").exists() ||
                File(current, "settings.gradle.kts").exists() ||
                File(current, "gradlew").exists()
            ) {
                return current
            }
            current = current.parentFile
        }

        return startDir ?: File(".")
    }

    private fun runAllTestsWithGradle(projectRoot: File): TestResult {
        return try {
            println("üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã...")

            val gradlew = File(
                projectRoot,
                if (System.getProperty("os.name").lowercase().contains("win")) "gradlew.bat" else "gradlew"
            )
            val gradleCommand = if (gradlew.exists()) {
                gradlew.absolutePath
            } else {
                "gradle"
            }

            val testCommand = listOf(gradleCommand, "test", "--info")

            println("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${testCommand.joinToString(" ")}")

            val processBuilder = ProcessBuilder(testCommand)
                .directory(projectRoot)
                .redirectErrorStream(true)

            val process = processBuilder.start()
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()

            println("üìã –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:")
            println(output)

            if (exitCode == 0) {
                TestResult(true, "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n$output")
            } else {
                TestResult(false, "‚ùå –¢–µ—Å—Ç—ã —É–ø–∞–ª–∏ —Å –∫–æ–¥–æ–º $exitCode:\n$output")
            }

        } catch (e: Exception) {
            println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤: ${e.message}")
            TestResult(false, "All tests execution failed: ${e.message}")
        }
    }

    private fun runTestsWithGradle(projectRoot: File, className: String, packageName: String): TestResult {
        return try {
            println("üîç –ü–æ–∏—Å–∫ Gradle –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
            println("üìä –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            println("   - Project root: ${projectRoot.absolutePath}")
            println("   - Class name: $className")
            println("   - Package name: $packageName")

            val gradlew = File(
                projectRoot,
                if (System.getProperty("os.name").lowercase().contains("win")) "gradlew.bat" else "gradlew"
            )
            val gradleCommand = if (gradlew.exists()) {
                println("   - Using gradlew: ${gradlew.absolutePath}")
                gradlew.absolutePath
            } else {
                println("   - Using system gradle")
                "gradle"
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞ —Ç–µ—Å—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º Test –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            val testClassName = if (className.endsWith("Test")) className else "${className}Test"
            val fullTestClass = if (packageName.isNotEmpty()) {
                "${packageName}.${testClassName}"
            } else {
                testClassName
            }

            println("   - Test class name: $testClassName")
            println("   - Full test class: $fullTestClass")

            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - —ç—Ç–æ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            if (!File(projectRoot, "build.gradle.kts").exists() && !File(projectRoot, "build.gradle").exists()) {
                println("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: build.gradle –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${projectRoot.absolutePath}")
                println("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞")
            }

            println("gradleCommand: $gradleCommand")

            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            val testCommand = listOf(
                gradleCommand,
                "clean",
                "test",
                "--tests", fullTestClass
            )

            println("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${testCommand.joinToString(" ")}")
            println("üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${projectRoot.absolutePath}")

            val processBuilder = ProcessBuilder(testCommand)
                .directory(projectRoot)
                .redirectErrorStream(true)

            val process = processBuilder.start()
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()

            println("üìã –í—ã–≤–æ–¥ Gradle:")
            println(output)

            if (exitCode == 0) {
                TestResult(true, "‚úÖ Gradle —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n$output")
            } else {
                // –ï—Å–ª–∏ —Ç–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
                if (output.contains("No tests found")) {
                    println("üîÑ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã...")
                    return runAllGradleTests(projectRoot, gradleCommand)
                }
                TestResult(false, "‚ùå Gradle —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏ —Å –∫–æ–¥–æ–º $exitCode:\n$output")
            }

        } catch (e: Exception) {
            println("‚ö†Ô∏è  Gradle –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: ${e.message}")
            TestResult(false, "Gradle execution failed: ${e.message}")
        }
    }

    private fun runAllGradleTests(projectRoot: File, gradleCommand: String): TestResult {
        return try {
            val testCommand = listOf(
                gradleCommand,
                "clean",
                "test",
                "--info"
            )

            println("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤: ${testCommand.joinToString(" ")}")

            val processBuilder = ProcessBuilder(testCommand)
                .directory(projectRoot)
                .redirectErrorStream(true)

            val process = processBuilder.start()
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()

            println("üìã –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:")
            println(output)

            if (exitCode == 0) {
                TestResult(true, "‚úÖ –í—Å–µ Gradle —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n$output")
            } else {
                TestResult(false, "‚ùå Gradle —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏ —Å –∫–æ–¥–æ–º $exitCode:\n$output")
            }

        } catch (e: Exception) {
            TestResult(false, "All tests execution failed: ${e.message}")
        }
    }

    private fun runTestsWithMaven(projectRoot: File, className: String, packageName: String): TestResult {
        return try {
            println("üîç –ü–æ–∏—Å–∫ Maven –≤ –ø—Ä–æ–µ–∫—Ç–µ...")

            if (!File(projectRoot, "pom.xml").exists()) {
                return TestResult(false, "pom.xml not found")
            }

            val mvnCommand = if (System.getProperty("os.name").lowercase().contains("win")) "mvn.cmd" else "mvn"

            val testCommand = listOf(
                mvnCommand,
                "test",
                "-Dtest=${className}Test"
            )

            println("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${testCommand.joinToString(" ")}")

            val processBuilder = ProcessBuilder(testCommand)
                .directory(projectRoot)
                .redirectErrorStream(true)

            val process = processBuilder.start()
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()

            println("üìã –í—ã–≤–æ–¥ Maven:")
            println(output)

            if (exitCode == 0) {
                TestResult(true, "‚úÖ Maven —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n$output")
            } else {
                TestResult(false, "‚ùå Maven —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏ —Å –∫–æ–¥–æ–º $exitCode:\n$output")
            }

        } catch (e: Exception) {
            println("‚ö†Ô∏è  Maven –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: ${e.message}")
            TestResult(false, "Maven execution failed: ${e.message}")
        }
    }

    private fun runTestsWithKotlinc(
        testFilePath: String,
        className: String,
        packageName: String,
        projectRoot: File
    ): TestResult {
        return try {
            println("üîç –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å kotlinc...")

            val testFile = File(testFilePath)
            val tempDir = File(System.getProperty("java.io.tmpdir"), "kotlin-test-${System.currentTimeMillis()}")
            tempDir.mkdirs()

            // –ò—â–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
            val sourceFile = findSourceFile(projectRoot, className, packageName)

            if (sourceFile == null) {
                return TestResult(false, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–ª–∞—Å—Å–∞ $className")
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º classpath —Å JUnit
            val junitClasspath = findJUnitClasspath()
            if (junitClasspath.isEmpty()) {
                return TestResult(false, "‚ùå JUnit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ classpath. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ JUnit 5.")
            }

            // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            val compileSourceCommand = listOf(
                "kotlinc",
                sourceFile.absolutePath,
                "-cp", junitClasspath,
                "-d", tempDir.absolutePath
            )

            println("üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${compileSourceCommand.joinToString(" ")}")
            val compileSourceProcess = ProcessBuilder(compileSourceCommand).start()
            val compileSourceOutput = compileSourceProcess.inputStream.bufferedReader().readText()
            val compileSourceExit = compileSourceProcess.waitFor()

            if (compileSourceExit != 0) {
                return TestResult(false, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:\n$compileSourceOutput")
            }

            // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            val compileTestCommand = listOf(
                "kotlinc",
                testFile.absolutePath,
                "-cp", "$junitClasspath${File.pathSeparator}${tempDir.absolutePath}",
                "-d", tempDir.absolutePath
            )

            println("üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ${compileTestCommand.joinToString(" ")}")
            val compileTestProcess = ProcessBuilder(compileTestCommand).start()
            val compileTestOutput = compileTestProcess.inputStream.bufferedReader().readText()
            val compileTestExit = compileTestProcess.waitFor()

            if (compileTestExit != 0) {
                return TestResult(false, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:\n$compileTestOutput")
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ JUnit Platform Console Launcher
            val runTestCommand = listOf(
                "java",
                "-cp", "$junitClasspath${File.pathSeparator}${tempDir.absolutePath}",
                "org.junit.platform.console.ConsoleLauncher",
                "--select-class", "${packageName}.${className}Test",
                "--details", "verbose"
            )

            println("üèÉ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${runTestCommand.joinToString(" ")}")
            val runTestProcess = ProcessBuilder(runTestCommand).start()
            val runTestOutput = runTestProcess.inputStream.bufferedReader().readText()
            val runTestExit = runTestProcess.waitFor()

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            tempDir.deleteRecursively()

            println("üìã –í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:")
            println(runTestOutput)

            if (runTestExit == 0) {
                TestResult(true, "‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å kotlinc!\n$runTestOutput")
            } else {
                TestResult(false, "‚ùå –¢–µ—Å—Ç—ã —É–ø–∞–ª–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å kotlinc (–∫–æ–¥ $runTestExit):\n$runTestOutput")
            }

        } catch (e: Exception) {
            println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å kotlinc: ${e.message}")
            TestResult(false, "kotlinc execution failed: ${e.message}")
        }
    }

    private fun findSourceFile(projectRoot: File, className: String, packageName: String): File? {
        val packagePath = packageName.replace(".", File.separator)
        val possiblePaths = listOf(
            "src/main/kotlin/$packagePath/$className.kt",
            "src/main/java/$packagePath/$className.kt",
            "src/kotlin/$packagePath/$className.kt",
            "src/$packagePath/$className.kt",
            "$packagePath/$className.kt",
            "$className.kt"
        )

        for (path in possiblePaths) {
            val file = File(projectRoot, path)
            if (file.exists()) {
                println("‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${file.absolutePath}")
                return file
            }
        }

        println("‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:")
        possiblePaths.forEach { println("   - ${File(projectRoot, it).absolutePath}") }
        return null
    }

    private fun findJUnitClasspath(): String {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JUnit –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        val possibleJars = listOf(
            // Gradle cache locations
            "${System.getProperty("user.home")}/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-engine",
            "${System.getProperty("user.home")}/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-api",
            "${System.getProperty("user.home")}/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-console-standalone",
            // Maven cache locations
            "${System.getProperty("user.home")}/.m2/repository/org/junit/jupiter/junit-jupiter-engine",
            "${System.getProperty("user.home")}/.m2/repository/org/junit/jupiter/junit-jupiter-api",
            "${System.getProperty("user.home")}/.m2/repository/org/junit/platform/junit-platform-console-standalone"
        )

        val junitJars = mutableListOf<String>()

        for (basePath in possibleJars) {
            val baseDir = File(basePath)
            if (baseDir.exists()) {
                baseDir.walkTopDown()
                    .filter { it.isFile && it.name.endsWith(".jar") }
                    .forEach { junitJars.add(it.absolutePath) }
            }
        }

        if (junitJars.isNotEmpty()) {
            println("‚úÖ –ù–∞–π–¥–µ–Ω—ã JUnit JAR —Ñ–∞–π–ª—ã:")
            junitJars.forEach { println("   - $it") }
            return junitJars.joinToString(File.pathSeparator)
        }

        println("‚ö†Ô∏è  JUnit JAR —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π classpath...")
        return System.getProperty("java.class.path", "")
    }

    private fun detectPackageName(sourceCode: String): String {
        val packageRegex = Regex("package\\s+([a-zA-Z_][a-zA-Z0-9_.]*)")
        val match = packageRegex.find(sourceCode)
        return match?.groupValues?.getOrNull(1) ?: "com.example"
    }

    private fun extractClassName(sourceCode: String): String {
        val classRegex = Regex("(?:class|object)\\s+([a-zA-Z_][a-zA-Z0-9_]*)")
        val match = classRegex.find(sourceCode)
        return match?.groupValues?.getOrNull(1) ?: "UnknownClass"
    }

    // === DeepSeek API support ===
    // Uses OpenAI-compatible Chat Completions endpoint.
    private val deepseekApiBaseUrl = "https://api.deepseek.com"
    private val deepseekChatCompletionsPath = "/chat/completions"
    private val deepseekApiKey: String? = System.getenv("DEEPSEEK_API_KEY")

    /**
     * Call DeepSeek chat completion API.
     *
     * @param userContent - user message to send
     * @param systemPrompt - optional system prompt
     * @param model - DeepSeek model id, e.g. "deepseek-chat" or "deepseek-reasoner"
     * @param temperature - sampling temperature (optional)
     * @param maxTokens - optional max tokens for completion
     * @throws IllegalStateException if DEEPSEEK_API_KEY is not set
     * @throws IOException on non-200 response
     */
    fun callDeepSeekChat(
        userContent: String,
        systemPrompt: String? = null,
        model: String = "deepseek-chat",
        temperature: Double? = 0.1,
        maxTokens: Int? = null
    ): String {
        val key = deepseekApiKey ?: throw IllegalStateException("‚ùå DEEPSEEK_API_KEY environment variable is not set")
        val url = deepseekApiBaseUrl + deepseekChatCompletionsPath

        val messages = mutableListOf<Map<String, Any?>>()
        if (!systemPrompt.isNullOrBlank()) {
            messages += mapOf("role" to "system", "content" to systemPrompt)
        }
        messages += mapOf("role" to "user", "content" to userContent)

        val payload = mutableMapOf<String, Any?>(
            "model" to model,
            "messages" to messages,
            "stream" to false
        )
        if (temperature != null) payload["temperature"] = temperature
        if (maxTokens != null) payload["max_tokens"] = maxTokens

        val mediaType = "application/json; charset=utf-8".toMediaType()
        val body = objectMapper.writeValueAsString(payload).toRequestBody(mediaType)

        val request = Request.Builder()
            .url(url)
            .header("Authorization", "Bearer $key")
            .header("Content-Type", "application/json")
            .post(body)
            .build()

        httpClient.newCall(request).execute().use { resp ->
            val respBody = resp.body?.string() ?: ""
            if (!resp.isSuccessful) {
                throw IOException("DeepSeek API error: HTTP ${resp.code} -> $respBody")
            }
            val node = objectMapper.readTree(respBody)
            // Non-streaming response: choices[0].message.content
            val contentNode = node.get("choices")?.get(0)?.get("message")?.get("content")
            return cleanupGeneratedCode(contentNode?.asText() ?: respBody)
        }
    }
    // === End of DeepSeek API support ===
}

fun main(args: Array<String>) = runBlocking {
    println("ü§ñ Enhanced Test Agent v2.0")
    println("=" * 60)

    if (args.isEmpty()) {
        println(
            """
            üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
            kotlin EnhancedTestAgent.kt <–ø—É—Ç—å_–∫_–∏—Å—Ö–æ–¥–Ω–æ–º—É_—Ñ–∞–π–ª—É> [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_—Ç–µ—Å—Ç–æ–≤] [–ø–∞–∫–µ—Ç]
            
            üìù –ü—Ä–∏–º–µ—Ä—ã:
            kotlin EnhancedTestAgent.kt src/main/kotlin/Calculator.kt
            kotlin EnhancedTestAgent.kt Calculator.kt test/CalculatorTest.kt
            kotlin EnhancedTestAgent.kt Calculator.kt test/CalculatorTest.kt com.myapp
            
            üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
            GEMINI_API_KEY - API –∫–ª—é—á –¥–ª—è Gemini (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            
            üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å GEMINI_API_KEY:
            1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ https://makersuite.google.com/app/apikey
            2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á
            3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: export GEMINI_API_KEY="your-api-key-here"
        """.trimIndent()
        )
        exitProcess(1)
    }

    val sourceFilePath = args[0]
    val testFilePath = args.getOrElse(1) {
        val sourceFile = File(sourceFilePath)
        val baseName = sourceFile.nameWithoutExtension
        val parentDir = sourceFile.parent ?: "."
        "$parentDir/${baseName}Test.kt"
    }
    val packageName = args.getOrNull(2)

    println("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    println("   üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath")
    println("   üß™ –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤: $testFilePath")
    println("   üì¶ –ü–∞–∫–µ—Ç: ${packageName ?: "–∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"}")
    println()

    val agent = EnhancedTestAgent()

    try {
        agent.generateTests(sourceFilePath, testFilePath, packageName = packageName)
        println("\nüéâ Enhanced Test Agent –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
        println("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: $testFilePath")

    } catch (e: Exception) {
        println("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
        e.printStackTrace()
        exitProcess(1)
    }
}

private operator fun String.times(n: Int) = this.repeat(n)