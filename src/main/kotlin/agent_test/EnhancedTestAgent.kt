import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import kotlinx.coroutines.runBlocking
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import java.io.File
import java.io.IOException
import java.time.Duration
import kotlin.system.exitProcess

class EnhancedTestAgent {
    private val httpClient = OkHttpClient.Builder()
        .connectTimeout(Duration.ofSeconds(20))
        .writeTimeout(Duration.ofSeconds(120))
        .readTimeout(Duration.ofSeconds(180))
        .callTimeout(Duration.ofSeconds(0))
        .retryOnConnectionFailure(true)
        .build()

    private val objectMapper: ObjectMapper = jacksonObjectMapper()
    private val geminiApiKey = System.getenv("GEMINI_API_KEY")
        ?: throw IllegalStateException("‚ùå GEMINI_API_KEY environment variable is not set")

    private val geminiApiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent"

    data class TestResult(
        val success: Boolean,
        val output: String,
        val errors: List<String> = emptyList()
    )

    suspend fun generateTests(
        sourceFilePath: String,
        testFilePath: String,
        maxIterations: Int = 5,
        packageName: String? = null
    ) {
        println("üöÄ Enhanced Test Agent –∑–∞–ø—É—â–µ–Ω")
        println("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath")
        println("üß™ –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤: $testFilePath")
        println("üì¶ –ü–∞–∫–µ—Ç: ${packageName ?: "auto-detect"}")

        val sourceFile = File(sourceFilePath)
        if (!sourceFile.exists()) {
            println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourceFilePath")
            return
        }

        val sourceCode = sourceFile.readText()
        val detectedPackage = packageName ?: detectPackageName(sourceCode)
        val className = extractClassName(sourceCode)

        println("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–ª–∞—Å—Å: $className")
        println("üì¶ –ü–∞–∫–µ—Ç: $detectedPackage")

        var iteration = 1
        var lastError = ""

        while (iteration <= maxIterations) {
            println("\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è $iteration/$maxIterations")

            try {
                val testCode = if (iteration == 1) {
                    generateInitialTests(sourceCode, sourceFilePath, className, detectedPackage)
                } else {
                    val existingTests = File(testFilePath).takeIf { it.exists() }?.readText() ?: ""
                    fixTests(sourceCode, existingTests, lastError, sourceFilePath, className, detectedPackage)
                }

                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                val testFile = File(testFilePath)
                testFile.parentFile?.mkdirs()
                testFile.writeText(testCode)

                println("üìù –¢–µ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: $testFilePath")

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Kotlin
                val syntaxCheck = checkKotlinSyntax(testCode)
                if (!syntaxCheck.success) {
                    println("‚ö†Ô∏è  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:")
                    println(syntaxCheck.output)
                    lastError = syntaxCheck.output
                    iteration++
                    continue
                }

                // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
                val compileResult = compileTest(testFilePath, detectedPackage)
                if (!compileResult.success) {
                    println("‚ö†Ô∏è  –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
                    println(compileResult.output)
                    lastError = compileResult.output
                    iteration++
                    continue
                }

                println("‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã!")

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                val runResult = tryRunTests(testFilePath, className, detectedPackage)
                if (runResult.success) {
                    println("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                } else {
                    println("‚ö†Ô∏è  –¢–µ—Å—Ç—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏:")
                    println(runResult.output)
                }

                return

            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ $iteration: ${e.message}")
                lastError = e.message ?: "Unknown error"
                e.printStackTrace()
            }

            iteration++
        }

        println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —Ç–µ—Å—Ç—ã –∑–∞ $maxIterations –∏—Ç–µ—Ä–∞—Ü–∏–π")
    }

    private suspend fun generateInitialTests(
        sourceCode: String,
        sourceFilePath: String,
        className: String,
        packageName: String
    ): String {
        val prompt = """
–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä JUnit 5 —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ Kotlin –∫–ª–∞—Å—Å–∞.

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π Kotlin –∫–æ–¥ –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath
- –ö–ª–∞—Å—Å: $className
- –ü–∞–∫–µ—Ç: $packageName

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
```kotlin
$sourceCode
```

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–∞–º:
1. –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å: package $packageName
2. –ò—Å–ø–æ–ª—å–∑—É–π JUnit 5 (import org.junit.jupiter.api.*)
3. –ò—Å–ø–æ–ª—å–∑—É–π kotlin.test –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö assertions –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
4. –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∞ ${className}Test
5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–ª–∞—Å—Å: import $packageName.$className
6. –ü–æ–∫—Ä–æ–π –í–°–ï –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
7. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è:
   - –û–±—ã—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
   - –ì—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
   - –û—à–∏–±–æ—á–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   - –ò—Å–∫–ª—é—á–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–π assertThrows)
8. –ò—Å–ø–æ–ª—å–∑—É–π @Test, @BeforeEach, @AfterEach –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
9. –°–æ–∑–¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `method should behavior when condition`
10. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ assertions (assertEquals, assertTrue, assertThrows –∏ —Ç.–¥.)
11. –î–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π delta –≤ assertEquals
12. –î–æ–±–∞–≤—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
13. –í–ê–ñ–ù–û: –î–ª—è Result —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π getOrThrow() –≤–º–µ—Å—Ç–æ getOrNull() –≤ assertions
14. –í–ê–ñ–ù–û: getOrNull() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullable —Ç–∏–ø - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ assertEquals
15. –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Result<T> - –∏—Å–ø–æ–ª—å–∑—É–π result.getOrThrow() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö

–í–µ—Ä–Ω–∏ –∫–æ–¥ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å package declaration, –±–µ–∑ markdown –±–ª–æ–∫–æ–≤.
        """.trimIndent()

        return callGeminiApi(prompt)
    }

    private suspend fun fixTests(
        sourceCode: String,
        existingTests: String,
        errorOutput: String,
        sourceFilePath: String,
        className: String,
        packageName: String
    ): String {
        val prompt = """
–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ Kotlin —Ç–µ—Å—Ç–∞—Ö.

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Kotlin –∫–æ–¥ –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath
- –ö–ª–∞—Å—Å: $className  
- –ü–∞–∫–µ—Ç: $packageName

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞:
```kotlin
$sourceCode
```

–¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã (—Å –æ—à–∏–±–∫–∞–º–∏):
```kotlin
$existingTests
```

–û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
```
$errorOutput
```

–ò—Å–ø—Ä–∞–≤—å –í–°–ï –æ—à–∏–±–∫–∏:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ
2. –ò—Å–ø—Ä–∞–≤—å package declaration –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
3. –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã (–¥–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ, —É–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ)
4. –ò—Å–ø—Ä–∞–≤—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Kotlin
5. –ò—Å–ø—Ä–∞–≤—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
6. –ò—Å–ø—Ä–∞–≤—å –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
7. –ò—Å–ø—Ä–∞–≤—å assertions - –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
8. –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ $className –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏
9. –î–ª—è assertThrows –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: assertThrows<ExceptionType> { }
10. –î–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –¥–æ–±–∞–≤—å delta –≤ assertEquals
11. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω—ã
12. –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Result.getOrNull() –≤ assertions - –∑–∞–º–µ–Ω–∏ –Ω–∞ getOrThrow() –∏–ª–∏ –¥–æ–±–∞–≤—å null check
13. –í–ê–ñ–ù–û: getOrNull() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullable —Ç–∏–ø, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ assertEquals/assertTrue/assertFalse
14. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ "actual type is 'Type?', but 'Type' was expected" - –∏—Å–ø—Ä–∞–≤—å nullable —Ç–∏–ø—ã
15. –î–ª—è Result —Ç–∏–ø–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π getOrThrow() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ assertNotNull + assertEquals

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å: package $packageName

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –±–ª–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ!
        """.trimIndent()

        return callGeminiApi(prompt)
    }

    private suspend fun callGeminiApi(prompt: String): String {
        val requestBody = mapOf(
            "contents" to listOf(
                mapOf("parts" to listOf(mapOf("text" to prompt)))
            ),
            "generationConfig" to mapOf(
                "temperature" to 0.1,
                "maxOutputTokens" to 8000,
                "topP" to 0.8,
                "topK" to 40
            ),
            "safetySettings" to listOf(
                mapOf("category" to "HARM_CATEGORY_HARASSMENT", "threshold" to "BLOCK_NONE"),
                mapOf("category" to "HARM_CATEGORY_HATE_SPEECH", "threshold" to "BLOCK_NONE"),
                mapOf("category" to "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold" to "BLOCK_NONE"),
                mapOf("category" to "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold" to "BLOCK_NONE")
            )
        )

        val json = objectMapper.writeValueAsString(requestBody)
        val body = json.toRequestBody("application/json".toMediaType())

        val request = Request.Builder()
            .url("$geminiApiUrl?key=$geminiApiKey")
            .post(body)
            .header("Content-Type", "application/json")
            .build()

        return httpClient.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "No error details"
                throw IOException("Gemini API error: ${response.code} - ${response.message}\nDetails: $errorBody")
            }

            val responseBody = response.body?.string()
                ?: throw IOException("Empty response from Gemini API")

            try {
                val jsonResponse: JsonNode = objectMapper.readTree(responseBody)

                // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
                val candidates = jsonResponse.path("candidates")
                if (candidates.isEmpty || candidates.isNull) {
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                    val error = jsonResponse.path("error")
                    if (!error.isMissingNode) {
                        val errorMessage = error.path("message").asText("Unknown API error")
                        throw IOException("Gemini API returned error: $errorMessage")
                    }
                    throw IOException("No candidates in API response: $responseBody")
                }

                val firstCandidate = candidates.first()
                if (firstCandidate.isNull) {
                    throw IOException("First candidate is null in API response")
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                val finishReason = firstCandidate.path("finishReason").asText("")
                if (finishReason == "SAFETY") {
                    throw IOException("Content was blocked by safety filters")
                } else if (finishReason == "RECITATION") {
                    throw IOException("Content was blocked due to recitation concerns")
                } else if (finishReason == "OTHER") {
                    println("‚ö†Ô∏è  Warning: API finished with 'OTHER' reason, attempting to extract content")
                }

                val content = firstCandidate.path("content")
                if (content.isNull || content.isMissingNode) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç
                    val text = firstCandidate.path("text").asText("")
                    if (text.isNotBlank()) {
                        return cleanupGeneratedCode(text)
                    }
                    throw IOException("No content in API response candidate")
                }

                val parts = content.path("parts")
                if (parts.isEmpty || parts.isNull) {
                    throw IOException("No parts in API response content")
                }

                // –ò—â–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º
                var extractedText = ""
                for (part in parts) {
                    val text = part.path("text").asText("")
                    if (text.isNotBlank()) {
                        extractedText = text
                        break
                    }
                }

                if (extractedText.isBlank()) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    println("üîç Debug: –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
                    println(responseBody.take(500) + "...")
                    throw IOException("Empty or missing text in all API response parts")
                }

                return cleanupGeneratedCode(extractedText)

            } catch (e: Exception) {
                when (e) {
                    is IOException -> throw e
                    else -> throw IOException("Failed to parse Gemini API response: ${e.message}\nResponse preview: ${responseBody.take(200)}...")
                }
            }
        }
    }

    private fun cleanupGeneratedCode(code: String): String {
        var cleaned = code.trim()

        println("üîç –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        println("${cleaned.take(200)}...")

        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞

        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—â–µ–º kotlin –±–ª–æ–∫–∏
        val kotlinBlockPattern = Regex("```kotlin\\s*\\n(.*?)\\n```", RegexOption.DOT_MATCHES_ALL)
        var match = kotlinBlockPattern.find(cleaned)
        if (match != null) {
            cleaned = match.groupValues[1].trim()
            println("‚úÖ –ù–∞–π–¥–µ–Ω kotlin –±–ª–æ–∫")
        } else {
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò—â–µ–º –ª—é–±—ã–µ code –±–ª–æ–∫–∏
            val codeBlockPattern = Regex("```\\s*\\n(.*?)\\n```", RegexOption.DOT_MATCHES_ALL)
            match = codeBlockPattern.find(cleaned)
            if (match != null) {
                cleaned = match.groupValues[1].trim()
                println("‚úÖ –ù–∞–π–¥–µ–Ω code –±–ª–æ–∫")
            } else {
                // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ò—â–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏
                val inlineKotlinPattern = Regex("```kotlin([^`]*)```", RegexOption.DOT_MATCHES_ALL)
                match = inlineKotlinPattern.find(cleaned)
                if (match != null) {
                    cleaned = match.groupValues[1].trim()
                    println("‚úÖ –ù–∞–π–¥–µ–Ω inline kotlin –±–ª–æ–∫")
                } else {
                    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ç–æ –≤—Å–µ ``` —Å–∏–º–≤–æ–ª—ã
                    if (cleaned.contains("```")) {
                        cleaned = cleaned
                            .replace("```kotlin", "")
                            .replace("```", "")
                            .trim()
                        println("‚úÖ –£–±—Ä–∞–ª–∏ markdown —Ä–∞–∑–º–µ—Ç–∫—É")
                    }
                }
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        cleaned = cleaned
            .split('\n')
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Kotlin –∫–æ–¥
        if (!cleaned.contains("package ") && !cleaned.contains("class ") && !cleaned.contains("fun ")) {
            println("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Kotlin –∫–æ–¥")

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            val lines = cleaned.split('\n')
            val kotlinStartIndex = lines.indexOfFirst {
                it.trim().startsWith("package ") ||
                        it.trim().startsWith("import ") ||
                        it.trim().startsWith("class ")
            }

            if (kotlinStartIndex >= 0) {
                cleaned = lines.drop(kotlinStartIndex).joinToString("\n")
                println("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ $kotlinStartIndex")
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (!cleaned.startsWith("package ")) {
            println("‚ö†Ô∏è  –ö–æ–¥ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å package declaration")
        }

        println("üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–¥ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        println("${cleaned.take(200)}...")

        return cleaned
    }

    private fun checkKotlinSyntax(code: String): TestResult {
        return try {
            val errors = mutableListOf<String>()
            val lines = code.split('\n')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (!code.contains("package ")) {
                errors.add("‚ùå Missing package declaration")
            }

            if (!code.contains("class ") && !code.contains("object ")) {
                errors.add("‚ùå No class or object declaration found")
            }

            if (!code.contains("@Test")) {
                errors.add("‚ùå No test methods found (missing @Test annotations)")
            }

            if (!code.contains("import org.junit.jupiter.api")) {
                errors.add("‚ùå Missing JUnit imports")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            var braceBalance = 0
            var parenBalance = 0

            lines.forEachIndexed { index, line ->
                val trimmed = line.trim()
                if (trimmed.isNotEmpty() && !trimmed.startsWith("//") && !trimmed.startsWith("*")) {

                    // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–±–∫–∏
                    braceBalance += trimmed.count { it == '{' } - trimmed.count { it == '}' }
                    parenBalance += trimmed.count { it == '(' } - trimmed.count { it == ')' }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    if (trimmed.contains("assertThrows(") && !trimmed.contains("assertThrows<")) {
                        errors.add("‚ùå Line ${index + 1}: Incorrect assertThrows syntax, use assertThrows<ExceptionType>")
                    }

                    if (trimmed.contains("assertEquals(") && trimmed.contains("Double") && !trimmed.contains("delta") && !trimmed.contains("0.0")) {
                        errors.add("‚ö†Ô∏è  Line ${index + 1}: Consider using delta for Double assertions")
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å nullable —Ç–∏–ø–∞–º–∏
                    if (trimmed.contains("result.getOrNull()") && trimmed.contains("assertEquals")) {
                        errors.add("‚ùå Line ${index + 1}: result.getOrNull() returns nullable type, use result.getOrThrow() or handle null")
                    }

                    if (trimmed.contains(".getOrNull()") && (trimmed.contains("assertEquals") || trimmed.contains("assertTrue") || trimmed.contains("assertFalse"))) {
                        errors.add("‚ùå Line ${index + 1}: getOrNull() returns nullable type, assertions may fail due to type mismatch")
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "actual type is 'Type?', but 'Type' was expected"
                    if (trimmed.contains("Double?") && trimmed.contains("Double")) {
                        errors.add("‚ùå Line ${index + 1}: Nullable Double? cannot be used where non-null Double is expected")
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Result.getOrNull() –≤ assertions
                    val resultGetOrNullPattern = Regex("assertEquals\\s*\\([^,]+,\\s*[^.]+\\.getOrNull\\(\\)")
                    if (resultGetOrNullPattern.containsMatchIn(trimmed)) {
                        errors.add("‚ùå Line ${index + 1}: Use getOrThrow() instead of getOrNull() in assertEquals, or add null check")
                    }
                }
            }

            if (braceBalance != 0) {
                errors.add("‚ùå Unbalanced braces in code")
            }

            if (parenBalance != 0) {
                errors.add("‚ùå Unbalanced parentheses in code")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–±–ª–µ–º—ã
            if (code.contains("@Test") && !code.contains("fun ")) {
                errors.add("‚ùå Test annotations found but no test functions")
            }

            TestResult(
                success = errors.isEmpty(),
                output = if (errors.isEmpty()) "‚úÖ Syntax validation passed" else errors.joinToString("\n"),
                errors = errors
            )
        } catch (e: Exception) {
            TestResult(false, "‚ùå Syntax check failed: ${e.message}")
        }
    }

    private fun compileTest(testFilePath: String, packageName: String): TestResult {
        return try {
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            val testFile = File(testFilePath)
            if (!testFile.exists()) {
                return TestResult(false, "Test file does not exist: $testFilePath")
            }

            val content = testFile.readText()
            val requiredElements = listOf(
                "package $packageName",
                "import org.junit.jupiter.api.Test",
                "@Test",
                "class "
            )

            val missingElements = requiredElements.filter { !content.contains(it) }

            if (missingElements.isNotEmpty()) {
                return TestResult(false, "Missing required elements: ${missingElements.joinToString(", ")}")
            }

            println("‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            TestResult(true, "Compilation check passed")

        } catch (e: Exception) {
            TestResult(false, "Compilation check failed: ${e.message}")
        }
    }

    private fun tryRunTests(testFilePath: String, className: String, packageName: String): TestResult {
        return try {
            println("üèÉ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤...")
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
            TestResult(true, "Test execution simulation passed")
        } catch (e: Exception) {
            TestResult(false, "Test execution failed: ${e.message}")
        }
    }

    private fun detectPackageName(sourceCode: String): String {
        val packageRegex = Regex("package\\s+([a-zA-Z_][a-zA-Z0-9_.]*)")
        val match = packageRegex.find(sourceCode)
        return match?.groupValues?.getOrNull(1) ?: "com.example"
    }

    private fun extractClassName(sourceCode: String): String {
        val classRegex = Regex("(?:class|object)\\s+([a-zA-Z_][a-zA-Z0-9_]*)")
        val match = classRegex.find(sourceCode)
        return match?.groupValues?.getOrNull(1) ?: "UnknownClass"
    }
}

fun main(args: Array<String>) = runBlocking {
    println("ü§ñ Enhanced Test Agent v2.0")
    println("=" * 60)

    if (args.isEmpty()) {
        println("""
            üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
            kotlin EnhancedTestAgent.kt <–ø—É—Ç—å_–∫_–∏—Å—Ö–æ–¥–Ω–æ–º—É_—Ñ–∞–π–ª—É> [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_—Ç–µ—Å—Ç–æ–≤] [–ø–∞–∫–µ—Ç]
            
            üìù –ü—Ä–∏–º–µ—Ä—ã:
            kotlin EnhancedTestAgent.kt src/main/kotlin/Calculator.kt
            kotlin EnhancedTestAgent.kt Calculator.kt test/CalculatorTest.kt
            kotlin EnhancedTestAgent.kt Calculator.kt test/CalculatorTest.kt com.myapp
            
            üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
            GEMINI_API_KEY - API –∫–ª—é—á –¥–ª—è Gemini (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            
            üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å GEMINI_API_KEY:
            1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ https://makersuite.google.com/app/apikey
            2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á
            3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: export GEMINI_API_KEY="your-api-key-here"
        """.trimIndent())
        exitProcess(1)
    }

    val sourceFilePath = args[0]
    val testFilePath = args.getOrElse(1) {
        val sourceFile = File(sourceFilePath)
        val baseName = sourceFile.nameWithoutExtension
        val parentDir = sourceFile.parent ?: "."
        "$parentDir/${baseName}Test.kt"
    }
    val packageName = args.getOrNull(2)

    println("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    println("   üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath")
    println("   üß™ –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤: $testFilePath")
    println("   üì¶ –ü–∞–∫–µ—Ç: ${packageName ?: "–∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"}")
    println()

    val agent = EnhancedTestAgent()

    try {
        agent.generateTests(sourceFilePath, testFilePath, packageName = packageName)
        println("\nüéâ Enhanced Test Agent –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
        println("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: $testFilePath")

    } catch (e: Exception) {
        println("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
        e.printStackTrace()
        exitProcess(1)
    }
}

private operator fun String.times(n: Int) = this.repeat(n)