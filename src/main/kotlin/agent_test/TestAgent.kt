package agent_test

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import kotlinx.coroutines.runBlocking
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import java.io.File
import java.io.IOException
import java.time.Duration
import kotlin.system.exitProcess

class TestAgent {
    private val httpClient = OkHttpClient.Builder()
        .connectTimeout(Duration.ofSeconds(20))
        .writeTimeout(Duration.ofSeconds(120))
        .readTimeout(Duration.ofSeconds(180))
        .callTimeout(Duration.ofSeconds(0))
        .retryOnConnectionFailure(true)
        .build()

    private val objectMapper: ObjectMapper = jacksonObjectMapper()
    private val geminiApiKey = System.getenv("GEMINI_API_KEY") 
        ?: throw IllegalStateException("GEMINI_API_KEY environment variable is not set")
    
    private val geminiApiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent"

    suspend fun generateTests(sourceFilePath: String, testFilePath: String, maxIterations: Int = 5) {
        println("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤...")
        println("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath")
        println("üß™ –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤: $testFilePath")
        
        val sourceFile = File(sourceFilePath)
        if (!sourceFile.exists()) {
            println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourceFilePath")
            return
        }
        
        val sourceCode = sourceFile.readText()
        var iteration = 1
        
        while (iteration <= maxIterations) {
            println("\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è $iteration –∏–∑ $maxIterations")
            
            try {
                val testCode = if (iteration == 1) {
                    generateInitialTests(sourceCode, sourceFilePath)
                } else {
                    val testFile = File(testFilePath)
                    val existingTests = if (testFile.exists()) testFile.readText() else ""
                    val errorOutput = runTests(testFilePath)
                    
                    if (errorOutput.isEmpty()) {
                        println("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏!")
                        return
                    }
                    
                    println("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö:")
                    println(errorOutput)
                    
                    fixTests(sourceCode, existingTests, errorOutput, sourceFilePath)
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª
                val testFile = File(testFilePath)
                testFile.parentFile?.mkdirs()
                testFile.writeText(testCode)
                
                println("üìù –¢–µ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: $testFilePath")
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
                val errorOutput = runTests(testFilePath)
                
                if (errorOutput.isEmpty()) {
                    println("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–æ—à–ª–∏!")
                    return
                } else {
                    println("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...")
                }
                
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ $iteration: ${e.message}")
                e.printStackTrace()
            }
            
            iteration++
        }
        
        println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —Ç–µ—Å—Ç—ã –∑–∞ $maxIterations –∏—Ç–µ—Ä–∞—Ü–∏–π")
    }

    private suspend fun generateInitialTests(sourceCode: String, sourceFilePath: String): String {
        val prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π Kotlin –∫–æ–¥ –∏ —Å–æ–∑–¥–∞–π –¥–ª—è –Ω–µ–≥–æ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä JUnit —Ç–µ—Å—Ç–æ–≤.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath
–ö–æ–¥:
```kotlin
$sourceCode
```

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–∞–º:
1. –ò—Å–ø–æ–ª—å–∑—É–π JUnit 5 (org.junit.jupiter.api.*)
2. –ü–æ–∫—Ä–æ–π –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
4. –°–æ–∑–¥–∞–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤
5. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ assert –º–µ—Ç–æ–¥—ã
6. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –º–æ–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–æ–∑–¥–∞–π –∏—Ö
7. –î–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ imports
8. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
        """.trimIndent()

        return callGeminiApi(prompt)
    }

    private suspend fun fixTests(sourceCode: String, existingTests: String, errorOutput: String, sourceFilePath: String): String {
        val prompt = """
–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö –¥–ª—è Kotlin –∫–æ–¥–∞.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $sourceFilePath
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
```kotlin
$sourceCode
```

–¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã:
```kotlin
$existingTests
```

–û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
```
$errorOutput
```

–ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ –≤–µ—Ä–Ω–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤:
1. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
2. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
3. –ò—Å–ø—Ä–∞–≤—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω—ã
5. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥—ã

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
        """.trimIndent()

        return callGeminiApi(prompt)
    }

    private suspend fun callGeminiApi(prompt: String): String {
        val requestBody = mapOf(
            "contents" to listOf(
                mapOf("parts" to listOf(mapOf("text" to prompt)))
            ),
            "generationConfig" to mapOf(
                "temperature" to 0.1,
                "maxOutputTokens" to 4000
            )
        )

        val json = objectMapper.writeValueAsString(requestBody)
        val body = json.toRequestBody("application/json".toMediaType())

        val request = Request.Builder()
            .url("$geminiApiUrl?key=$geminiApiKey")
            .post(body)
            .build()

        return httpClient.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                throw IOException("–û—à–∏–±–∫–∞ API: ${response.code} - ${response.message}")
            }

            val responseBody = response.body?.string() 
                ?: throw IOException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
            val jsonResponse: JsonNode = objectMapper.readTree(responseBody)
            
            val textResponse = jsonResponse
                .path("candidates")
                .firstOrNull()
                ?.path("content")
                ?.path("parts")
                ?.firstOrNull()
                ?.path("text")
                ?.asText()
                ?: throw IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API")

            println("model:\n $textResponse")
            textResponse
        }
    }

    private fun runTests(testFilePath: String): String {
        return try {
            val testFile = File(testFilePath)
            if (!testFile.exists()) {
                return "–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $testFilePath"
            }

            println("üî® –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ kotlinc
            val compileProcess = ProcessBuilder(
                "kotlinc", 
                "-cp", 
                getClasspath(),
                testFilePath
            ).redirectErrorStream(true).start()
            
            val compileOutput = compileProcess.inputStream.bufferedReader().readText()
            val compileExitCode = compileProcess.waitFor()
            
            if (compileExitCode != 0) {
                return "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:\n$compileOutput"
            }
            
            // –ï—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
            val testClassName = extractClassNameFromPath(testFilePath)
            val runProcess = ProcessBuilder(
                "kotlin",
                "-cp",
                "${getClasspath()}:.",
                "org.junit.platform.console.ConsoleLauncher",
                "--select-class",
                testClassName
            ).redirectErrorStream(true).start()
            
            val runOutput = runProcess.inputStream.bufferedReader().readText()
            val runExitCode = runProcess.waitFor()
            
            if (runExitCode != 0) {
                return "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:\n$runOutput"
            }
            
            println("‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã")
            return "" // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—Ö
            
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${e.message}"
        }
    }

    private fun getClasspath(): String {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º classpath —Å JUnit –∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        val gradleCache = System.getProperty("user.home") + "/.gradle/caches"
        val kotlinStdlib = "$gradleCache/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib"
        val junitApi = "$gradleCache/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-api"
        val junitEngine = "$gradleCache/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-engine"
        
        return "build/classes/kotlin/main:build/classes/kotlin/test:$kotlinStdlib/*:$junitApi/*:$junitEngine/*"
    }

    private fun extractClassNameFromPath(filePath: String): String {
        return File(filePath).nameWithoutExtension
    }
}

fun main(args: Array<String>) = runBlocking {
    println("ü§ñ Test Agent v1.0")
    println("=" * 50)
    
    if (args.isEmpty()) {
        println("""
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: kotlin Main.kt <–ø—É—Ç—å_–∫_–∏—Å—Ö–æ–¥–Ω–æ–º—É_—Ñ–∞–π–ª—É> [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_—Ç–µ—Å—Ç–æ–≤]
            
            –ü—Ä–∏–º–µ—Ä—ã:
            kotlin Main.kt src/main/kotlin/Calculator.kt
            kotlin Main.kt src/main/kotlin/Calculator.kt src/test/kotlin/CalculatorTest.kt
            
            –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
            GEMINI_API_KEY - API –∫–ª—é—á –¥–ª—è Gemini (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        """.trimIndent())
        exitProcess(1)
    }
    
    val sourceFilePath = args[0]
    val testFilePath = args.getOrElse(1) { 
        val sourceFile = File(sourceFilePath)
        val testDir = "src/test/kotlin"
        val testFileName = "${sourceFile.nameWithoutExtension}Test.kt"
        "$testDir/$testFileName"
    }
    
    val agent = TestAgent()
    
    try {
        agent.generateTests(sourceFilePath, testFilePath)
        println("\nüéâ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
    } catch (e: Exception) {
        println("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
        e.printStackTrace()
        exitProcess(1)
    }
}

private operator fun String.times(n: Int) = this.repeat(n)