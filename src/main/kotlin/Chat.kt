import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.time.Duration
import mcp.TodoistManager
import agent.SystemAgent
import kotlin.collections.get

private const val INSTRUCTION_FILE = "system_instruction.txt"

data class Msg(val role: String, val content: String) // role: "user" | "model"

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Gradle
fun main() {
    runChat()
}

// –§—É–Ω–∫—Ü–∏—è main —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
fun main(input: String? = null): String {
    return runChat(input)
}

fun runChat(input: String? = null): String {
    val apiKey = System.getenv("GEMINI_API_KEY")
        ?: error("Set GEMINI_API_KEY environment variable")

    val todoistApiKey = System.getenv("TODOIST_API_KEY")
    val todoistServerPath = System.getenv("TODOIST_MCP_SERVER_PATH")

    val model = "gemini-2.5-flash-lite"
    val url = "https://generativelanguage.googleapis.com/v1beta/models/$model:generateContent?key=$apiKey"

    val systemInstruction = loadSystemInstruction()

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–≥–µ–Ω—Ç
    val systemAgent = SystemAgent()
    systemAgent.initialize()

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Todoist –º–µ–Ω–µ–¥–∂–µ—Ä
    val todoistManager = TodoistManager()
    if (todoistApiKey != null) {
        todoistManager.initialize(todoistApiKey, todoistServerPath)
        println("üìã Todoist: ${todoistManager.getStatus()}")
    } else {
        println("‚ö†Ô∏è TODOIST_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Todoist —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    }

    val history = mutableListOf<Msg>()

    val httpClient = OkHttpClient.Builder()
        .connectTimeout(Duration.ofSeconds(20))
        .writeTimeout(Duration.ofSeconds(120))
        .readTimeout(Duration.ofSeconds(180))
        .callTimeout(Duration.ofSeconds(0))
        .retryOnConnectionFailure(true)
        .build()

    val json = jacksonObjectMapper()

    println("Gemini Kotlin Chat —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. Type 'exit' to quit.\n")

    while (true) {
        print("–í—ã: ")
        val userInput = input ?: readlnOrNull()?.trim().orEmpty()
        if (userInput.isEmpty() || userInput.equals("exit", true)) {
            if (todoistApiKey != null) {
                todoistManager.disconnect()
            }
            systemAgent.disconnect()
            break
        }

        history += Msg("user", userInput)

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Todoist –∫–æ–º–∞–Ω–¥—ã
        if (userInput.startsWith("/todoist")) {
            val commandResult = handleTodoistCommand(userInput, todoistManager)
            history += Msg(
                "user", """
                –°–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –º–µ–Ω—è. –ü–µ—Ä–µ–¥–∞–≤–∞–π –º–Ω–µ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –∏ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ü–∏—Ç–∞—Ç—É,
                —á—Ç–æ–±—ã –ª–µ–≥—á–µ –±—ã–ª–æ –≤—Å—Ç–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ - –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —ç—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞, 
                —Å–¥–µ–ª–∞–π –≤–∏–¥ —á—Ç–æ —Ç—ã —Å–∞–º –µ—ë –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏ –Ω–∞–ø–∏—à–∏ –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–æ —Å–º–æ—Ç—Ä–µ–ª–æ—Å—å
                –î–æ–±–∞–≤—å —ç–º–æ–¥–∂–∏ –∏ —Ç–µ–ø–ª–æ—Ç—ã)
                –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á —ç–º–æ–¥–∂–∏ –Ω–µ –ø–∏—à—É—Ç—Å—è
                –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –∫ –∑–∞–¥–∞—á–∞–º!!!!
                –¢—ã –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—É–¥—É–∏—Å—Ç–∏–∫!
                –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –ø–∏—à–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –£—á–∏—Ç—ã–≤–∞–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª!!!
                
                —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏:
                - {–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏}{–≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç—å}
                
                –ø—É–Ω–∫—Ç –ø—Ä–æ –∑–∞–¥–∞—á–∏ –≤—ã–¥–µ–ª–∏ –∂–∏—Ä–Ω—ã–º
                
                –í–æ—Ç —Å–∞–º–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: $commandResult
            """.trimIndent()
            )
            println("–∏–¥—ë—Ç —Å–±–æ—Ä –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
        }

        // Gemini expects: contents[] with role + parts[text]
        val contents = history.map { m ->
            mapOf("role" to m.role, "parts" to listOf(mapOf("text" to m.content)))
        }
        val bodyMap = mapOf(
            "systemInstruction" to mapOf("parts" to listOf(mapOf("text" to systemInstruction))),
            "contents" to contents
        )
        val reqBody = json.writeValueAsString(bodyMap)
            .toRequestBody("application/json".toMediaType())

        val req = Request.Builder()
            .url(url)
            .post(reqBody)
            .header("Content-Type", "application/json")
            .build()

        httpClient.newCall(req).execute().use { resp ->
            if (!resp.isSuccessful) {
                val err = resp.body?.string().orEmpty()
                error("HTTP ${resp.code} - $err")
            }
            val txt = resp.body?.string().orEmpty()
            val tree = json.readTree(txt)

            // candidates[0].content.parts[0].text
            val reply = tree["candidates"]?.get(0)
                ?.get("content")?.get("parts")?.get(0)?.get("text")
                ?.asText()?.trim().orEmpty()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–∞
            val finalReply = if (reply.contains("–ö–û–ú–ê–ù–î–ê_–ê–ì–ï–ù–¢–ê:")) {
                val commandLine = reply.lines().find { it.contains("–ö–û–ú–ê–ù–î–ê_–ê–ì–ï–ù–¢–ê:") }
                if (commandLine != null) {
                    val command = commandLine.substringAfter("–ö–û–ú–ê–ù–î–ê_–ê–ì–ï–ù–¢–ê:").trim()
                    println("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–∞: $command")
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
                    val agentResult = systemAgent.executeCommand(command)
                    println("ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $agentResult")
                    
                    // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    reply.replace(commandLine, "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n$agentResult")
                } else {
                    reply
                }
            } else {
                reply
            }

            println("–ú–æ–¥–µ–ª—å: $finalReply\n")
            history += Msg("model", finalReply)

            // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ (input –∑–∞–¥–∞–Ω), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (input != null) {
                return finalReply
            }
        }
    }
    return ""
}

private fun loadSystemInstruction(): String {
    return readTextFileOrNull(INSTRUCTION_FILE) ?: ""
}

private fun readTextFileOrNull(path: String): String? {
    return try {
        val p = Paths.get(path)
        if (Files.exists(p)) Files.readString(p, StandardCharsets.UTF_8) else null
    } catch (_: Exception) {
        null
    }
}

private fun handleTodoistCommand(command: String, todoistManager: TodoistManager): String {
    val parts = command.split(" ")

    val response = StringBuilder()

    operator fun StringBuilder.invoke() = this.toString()

    if (parts.size < 2) {
        println("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /todoist <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        println("  projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        println("  tasks [project_id] - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        println("  add <—Ç–µ–∫—Å—Ç> [project_id] [due_date] - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
        println("  complete <task_id|–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
        println("  delete <task_id|–Ω–∞–∑–≤–∞–Ω–∏–µ> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
        println("  update <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        println("  status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return response()
    }

    when (parts[1]) {
        "projects" -> {
            println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
            val projects = todoistManager.getProjects()

            if (projects.isEmpty()) {
                println("üìã –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            } else {
                println("üìã –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")

                response.append(projects)
            }
        }

        "tasks" -> {
            val projectId = if (parts.size > 2) parts[2] else null
            println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á${if (projectId != null) " –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ $projectId" else ""}...")
            val tasks = todoistManager.getTasks(projectId)
            if (tasks.isEmpty()) {
                println("üìã –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            } else {
                println("üìã –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                val tasksText = (((tasks.first()["result"] as? Map<*, *>).orEmpty()["content"] as? List<*>)
                    ?.firstOrNull() as? Map<*, *>).orEmpty()

                response.append(tasksText)
            }
        }

        "todayTasks" -> {
            println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
            val tasks = todoistManager.getTasks(filter = "today")
            if (tasks.isEmpty()) {
                println("üìã –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            } else {
                println("üìã –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                val tasksText = (((tasks.first()["result"] as? Map<*, *>).orEmpty()["content"] as? List<*>)
                    ?.firstOrNull() as? Map<*, *>).orEmpty()
                println(tasksText)
                response.append(tasksText)
            }
        }

        "add" -> {
            if (parts.size < 3) {
                println("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
                return response()
            }
            val content = parts.drop(2).joinToString(" ")
            val projectId = if (parts.size > 3) parts[3] else null
            println("project " + parts.getOrNull(3))
            val dueDate = if (parts.size > 4) parts[4] else null
            println("due " + parts.getOrNull(4))

            println(parts)
            println("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: $content")
            if (todoistManager.createTask(content, projectId, dueDate)) {
                println("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
            }
        }

        "complete" -> {
            if (parts.size < 3) {
                println("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                return response()
            }
            val taskIdentifier = parts[2]

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —ç—Ç–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (taskIdentifier.matches(Regex("^\\d+$"))) {
                // –≠—Ç–æ ID
                println("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID $taskIdentifier...")
                if (todoistManager.completeTask(taskIdentifier)) {
                    println("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                } else {
                    println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
                }
            } else {
                // –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                val taskName = parts.drop(2).joinToString(" ")
                println("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '$taskName'...")
                if (todoistManager.completeTaskByName(taskName)) {
                    println("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                } else {
                    println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
                }
            }
        }

        "delete" -> {
            if (parts.size < 3) {
                println("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                return response()
            }
            val taskIdentifier = parts[2]

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —ç—Ç–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (taskIdentifier.matches(Regex("^\\d+$"))) {
                // –≠—Ç–æ ID
                println("üìã –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID $taskIdentifier...")
                if (todoistManager.deleteTask(taskIdentifier)) {
                    println("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
                } else {
                    println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
                }
            } else {
                // –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                val taskName = parts.drop(2).joinToString(" ")
                println("üìã –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '$taskName'...")
                if (todoistManager.deleteTaskByName(taskName)) {
                    println("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
                } else {
                    println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
                }
            }
        }

        "update" -> {
            if (parts.size < 3) {
                println("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return response()
            }
            val taskName = parts.drop(2).joinToString(" ")
            println("üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '$taskName'...")

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
            val newContent = readlnOrNull()?.trim()?.takeIf { it.isNotEmpty() }

            print("–ù–æ–≤–∞—è –¥–∞—Ç–∞ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
            val newDueDate = readlnOrNull()?.trim()?.takeIf { it.isNotEmpty() }

            print("–ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1-4 (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
            val newPriorityStr = readlnOrNull()?.trim()
            val newPriority = newPriorityStr?.toIntOrNull()?.takeIf { it in 1..4 }

            if (todoistManager.updateTask(taskName, newContent, newDueDate, newPriority)) {
                println("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            } else {
                println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            }
        }

        "status" -> {
            println("üìã –°—Ç–∞—Ç—É—Å Todoist: ${todoistManager.getStatus()}")
            if (todoistManager.isMcpConnected()) {
                println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${todoistManager.getAvailableTools().joinToString(", ")}")
            }
        }

        else -> {
            println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${parts[1]}")
        }
    }
    return response()
}
