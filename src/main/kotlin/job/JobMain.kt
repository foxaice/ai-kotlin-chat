package job

import main as mainWithParam
import runChat
import mcp.McpManager
import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder
import java.nio.charset.StandardCharsets
import kotlin.system.exitProcess

/**
 * Day 9 job —Å –¥–≤—É–º—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏:
 * - every N seconds:
 *   - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç McpManager –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ Todoist –∏ Telegram MCP
 *   - Todoist MCP –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏
 *   - Telegram MCP —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
 *
 * Default interval: 20 seconds
 *
 * CLI args (all optional):
 *   --intervalSeconds=20
 *   --input=/todoist todayTasks | /mcp-chain
 *   --chatId=12345678
 *   --tgToken=1234:ABCD...
 *   --useMcpChain=true
 */
fun main(args: Array<String>) {
    val opts = args.associateNotNull()
    val intervalSec = opts["intervalSeconds"]?.toIntOrNull() ?: 20
    val input = opts["input"] ?: "/mcp-chain"
    val useMcpChain = opts["useMcpChain"]?.toBoolean() ?: true
    val tgChatId = opts["chatId"] ?: System.getenv("TELEGRAM_CHAT_ID")
    val tgToken = opts["tgToken"] ?: System.getenv("TELEGRAM_BOT_TOKEN")

    System.err.println("[Day9] üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    System.err.println("[Day9] ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: intervalSeconds=$intervalSec, useMcpChain=$useMcpChain")
    System.err.println("[Day9] üì± TG Chat ID: ${tgChatId?.take(5)}***")
    System.err.println("[Day9] üîë TG Token: ${if (tgToken?.isNotBlank() == true) "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"}")

    if (tgToken.isNullOrBlank() || tgChatId.isNullOrBlank()) {
        System.err.println("[Day9] ‚ùå TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID not set. Exiting.")
        exitProcess(2)
    }
    if (System.getenv("GEMINI_API_KEY").isNullOrBlank()) {
        System.err.println("[Day9] ‚ùå GEMINI_API_KEY is not set. Exiting.")
        exitProcess(3)
    }

    val mcpManager = if (useMcpChain) {
        System.err.println("[Day9] üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        McpManager().apply {
            if (!connect()) {
                System.err.println("[Day9] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º")
                exitProcess(4)
            }
        }
    } else {
        null
    }

    System.err.println("[Day9] üöÄ Job started. intervalSeconds=$intervalSec, useMcpChain=$useMcpChain")

    try {
        while (true) {
            try {
                System.err.println("[Day9] üîÑ –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π —Ü–∏–∫–ª...")

                val reply = if (useMcpChain && mcpManager != null) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ø–æ—á–∫—É MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
                    System.err.println("[Day9] üîó –ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...")
                    val result = mcpManager.getTodayTasksAndSendToTelegram()
                    System.err.println("[Day9] üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç MCP —Ü–µ–ø–æ—á–∫–∏: $result")
                    result
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ ChatKt
                    System.err.println("[Day9] üí¨ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ChatKt...")
                    val chatReply = mainWithParam(input)
                    if (chatReply.isBlank()) {
                        System.err.println("[Day9] WARN: empty reply from ChatKt")
                        "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatKt"
                    } else {
                        System.err.println("[Day9] Got reply (${chatReply.length} chars). Sending to Telegram‚Ä¶")
                        sendTelegramMessage(tgToken, tgChatId, chatReply)
                        System.err.println("[Day9] Sent to Telegram via HTTP.")
                        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP API"
                    }
                }

                System.err.println("[Day9] ‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: $reply")
                System.err.println("[Day9] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${intervalSec} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")

            } catch (e: Exception) {
                System.err.println("[Day9] ERROR: ${e.message}")
                e.printStackTrace()
            }

            try {
                Thread.sleep((intervalSec * 1000L).coerceAtLeast(5000L))
            } catch (_: InterruptedException) {
                System.err.println("[Day9] üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            }
        }
    } finally {
        mcpManager?.disconnect()
        System.err.println("[Day9] üëã Job –∑–∞–≤–µ—Ä—à–µ–Ω")
    }
}

private const val MAX_TG_MESSAGE = 3900 // keep below Telegram 4096 limit

/**
 * Minimal Telegram sendMessage via HTTPS POST (application/x-www-form-urlencoded).
 * Splits long messages into chunks if needed.
 */
private fun sendTelegramMessage(token: String, chatId: String, text: String) {
    val chunks = text.chunked(MAX_TG_MESSAGE)
    for ((i, chunk) in chunks.withIndex()) {
        val ok = tgPostForm(
            url = "https://api.telegram.org/bot$token/sendMessage",
            form = "chat_id=${enc(chatId)}&text=${enc(chunk)}"
        )
        if (!ok) throw IllegalStateException("Telegram sendMessage failed on part ${i + 1}/${chunks.size}")
        // tiny delay to avoid flood limits
        Thread.sleep(300)
    }
}

private fun tgPostForm(url: String, form: String): Boolean {
    val u = URL(url)
    val conn = (u.openConnection() as HttpURLConnection).apply {
        requestMethod = "POST"
        doOutput = true
        setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
        connectTimeout = 15000
        readTimeout = 15000
    }
    conn.outputStream.use { os ->
        os.write(form.toByteArray(StandardCharsets.UTF_8))
    }
    val code = conn.responseCode
    // For debugging:
    if (code >= 300) {
        val err = conn.errorStream?.readBytes()?.toString(Charsets.UTF_8)
        System.err.println("[Day8] Telegram HTTP $code: $err")
    }
    conn.inputStream?.close()
    conn.disconnect()
    return code in 200..299
}

private fun enc(s: String) = URLEncoder.encode(s, "UTF-8")

private fun Array<String>.associateNotNull(): Map<String, String> =
    buildMap {
        for (a in this@associateNotNull) {
            if (!a.startsWith("--")) continue
            val eq = a.indexOf('=')
            if (eq > 2 && eq < a.length - 1) {
                val k = a.substring(2, eq)
                val v = a.substring(eq + 1)
                put(k, v)
            }
        }
    }