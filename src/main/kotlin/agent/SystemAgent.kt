package agent

import mcp.TodoistManager
import mcp.McpManager
import java.io.File
import java.util.concurrent.TimeUnit
import kotlin.concurrent.thread

class SystemAgent {
    private val todoistManager = TodoistManager()
    private var schedulerProcess: Process? = null
    private var schedulerThread: Thread? = null
    
    fun initialize() {
        val todoistApiKey = System.getenv("TODOIST_API_KEY")
        val todoistServerPath = System.getenv("TODOIST_MCP_SERVER_PATH")
        
        if (todoistApiKey != null) {
            todoistManager.initialize(todoistApiKey, todoistServerPath)
            println("ü§ñ –ê–≥–µ–Ω—Ç: Todoist –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }
    }
    
    fun executeCommand(command: String): String {
        return when {
            command.contains("–∑–∞–ø—É—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—É–¥—É–∏—Å—Ç–∞") || 
            command.contains("–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫") ||
            command.contains("–∑–∞–ø—É—Å—Ç–∏ –∑–∞–¥–∞—á–∏") -> {
                executeScheduler()
            }
            command.contains("–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫") ||
            command.contains("—Å—Ç–æ–ø –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫") -> {
                stopScheduler()
            }
            command.contains("–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã") ||
            command.contains("—Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞") -> {
                getSystemStatus()
            }
            command.contains("–Ω–∞—Å—Ç—Ä–æ–π —Å–∏—Å—Ç–µ–º—É") ||
            command.contains("–Ω–∞—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è") -> {
                configureSystem()
            }
            command.startsWith("–≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É:") -> {
                val cmd = command.removePrefix("–≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É:").trim()
                executeSystemCommand(cmd)
            }
            command.contains("–∑–∞–ø—É—Å—Ç–∏ –¥–µ–º–æ gradle") -> {
                executeDemoGradle()
            }
            command.contains("–∑–∞–ø—É—Å—Ç–∏ mcp —Ü–µ–ø–æ—á–∫—É") -> {
                executeMcpChain()
            }
            else -> "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º: $command"
        }
    }
    
    private fun executeScheduler(): String {
        return try {
            println("ü§ñ –ê–≥–µ–Ω—Ç: –ó–∞–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Todoist...")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            val tgToken = System.getenv("TELEGRAM_BOT_TOKEN")
            val tgChatId = System.getenv("TELEGRAM_CHAT_ID")
            val geminiKey = System.getenv("GEMINI_API_KEY")
            val todoistKey = System.getenv("TODOIST_API_KEY")
            
            if (tgToken.isNullOrBlank() || tgChatId.isNullOrBlank()) {
                return "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID"
            }
            
            if (geminiKey.isNullOrBlank()) {
                return "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GEMINI_API_KEY"
            }
            
            if (todoistKey.isNullOrBlank()) {
                return "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TODOIST_API_KEY"
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            stopScheduler()
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —á–µ—Ä–µ–∑ gradle –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            schedulerThread = thread {
                try {
                    val processBuilder = ProcessBuilder(
                        "./gradlew", "runJob",
                        "--args=--intervalSeconds=300 --useMcpChain=true --input=/mcp-chain"
                    )
                    processBuilder.environment().putAll(System.getenv())
                    processBuilder.redirectErrorStream(true)
                    
                    schedulerProcess = processBuilder.start()
                    
                    // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    schedulerProcess?.inputStream?.bufferedReader()?.use { reader ->
                        reader.lines().forEach { line ->
                            println("[–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫] $line")
                        }
                    }
                    
                    val exitCode = schedulerProcess?.waitFor() ?: -1
                    println("ü§ñ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: $exitCode")
                    
                } catch (e: Exception) {
                    println("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: ${e.message}")
                }
            }
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            Thread.sleep(2000)
            
            if (schedulerProcess?.isAlive == true) {
                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Todoist –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!\n" +
                "üì± –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Telegram –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n" +
                "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫'"
            } else {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é
                val tasks = todoistManager.getTasks(filter = "today")
                if (tasks.isNotEmpty()) {
                    val tasksText = formatTasksForDisplay(tasks)
                    "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –≤–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n$tasksText"
                } else {
                    "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }
            }
            
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${e.message}"
        }
    }
    
    private fun stopScheduler(): String {
        return try {
            var stopped = false
            
            schedulerProcess?.let { process ->
                if (process.isAlive) {
                    process.destroyForcibly()
                    process.waitFor(10, TimeUnit.SECONDS)
                    stopped = true
                }
            }
            
            schedulerThread?.let { thread ->
                if (thread.isAlive) {
                    thread.interrupt()
                    stopped = true
                }
            }
            
            schedulerProcess = null
            schedulerThread = null
            
            if (stopped) {
                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            } else {
                "‚ÑπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${e.message}"
        }
    }
    
    private fun formatTasksForDisplay(tasks: List<Map<String, Any>>): String {
        return buildString {
            for (task in tasks) {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MCP –æ—Ç–≤–µ—Ç–∞
                val result = task["result"] as? Map<*, *>
                val content = result?.get("content") as? List<*>
                
                if (content != null) {
                    for (item in content) {
                        if (item is Map<*, *>) {
                            val taskContent = item["content"] as? String ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                            val taskDue = item["due"] as? Map<*, *>
                            val dueString = taskDue?.get("string") as? String ?: ""
                            val dueDate = if (dueString.isNotEmpty()) " ($dueString)" else ""
                            appendLine("- $taskContent$dueDate")
                        }
                    }
                } else {
                    // Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ API
                    val taskContent = task["content"] as? String ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    val taskDue = task["due"] as? String ?: ""
                    val dueDate = if (taskDue.isNotEmpty()) " ($taskDue)" else ""
                    appendLine("- $taskContent$dueDate")
                }
            }
            
            if (isEmpty()) {
                append("üìù –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            }
        }
    }
    
    private fun getSystemStatus(): String {
        return buildString {
            appendLine("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
            appendLine("‚Ä¢ Todoist: ${todoistManager.getStatus()}")
            appendLine("‚Ä¢ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${if (todoistManager.isMcpConnected()) "‚úÖ" else "‚ùå"}")
            appendLine("‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${todoistManager.getAvailableTools().joinToString(", ")}")
            appendLine("‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ${if (schedulerProcess?.isAlive == true) "üü¢ –ó–∞–ø—É—â–µ–Ω" else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            val geminiKey = System.getenv("GEMINI_API_KEY")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            val todoistKey = System.getenv("TODOIST_API_KEY")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            val tgToken = System.getenv("TELEGRAM_BOT_TOKEN")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            val tgChatId = System.getenv("TELEGRAM_CHAT_ID")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            appendLine("‚Ä¢ GEMINI_API_KEY: $geminiKey")
            appendLine("‚Ä¢ TODOIST_API_KEY: $todoistKey")
            appendLine("‚Ä¢ TELEGRAM_BOT_TOKEN: $tgToken")
            appendLine("‚Ä¢ TELEGRAM_CHAT_ID: $tgChatId")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            val envFile = File(".env")
            val gradlewFile = File("./gradlew")
            appendLine("‚Ä¢ .env —Ñ–∞–π–ª: ${if (envFile.exists()) "‚úÖ –Ω–∞–π–¥–µ–Ω" else "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω"}")
            appendLine("‚Ä¢ gradlew: ${if (gradlewFile.exists() && gradlewFile.canExecute()) "‚úÖ –≥–æ—Ç–æ–≤" else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}")
        }
    }
    
    private fun configureSystem(): String {
        return "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:\n" +
               "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n" +
               "- GEMINI_API_KEY\n" +
               "- TODOIST_API_KEY\n" +
               "- TELEGRAM_BOT_TOKEN\n" +
               "- TELEGRAM_CHAT_ID\n\n" +
               "–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —ç—Ç–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"
    }
    
    private fun executeSystemCommand(command: String): String {
        return try {
            println("ü§ñ –ê–≥–µ–Ω—Ç: –í—ã–ø–æ–ª–Ω—è—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É: $command")
            val process = ProcessBuilder(command.split(" "))
                .redirectErrorStream(true)
                .start()
            
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()
            
            if (exitCode == 0) {
                "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n$output"
            } else {
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $exitCode):\n$output"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${e.message}"
        }
    }
    
    private fun executeDemoGradle(): String {
        return executeShellScript("./demo_gradle.sh")
    }
    
    private fun executeMcpChain(): String {
        return executeShellScript("./demo_mcp_chain.sh")
    }
    
    private fun executeShellScript(scriptPath: String): String {
        return try {
            val file = File(scriptPath)
            if (!file.exists()) {
                return "‚ùå –°–∫—Ä–∏–ø—Ç $scriptPath –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
            
            val process = ProcessBuilder("bash", scriptPath)
                .redirectErrorStream(true)
                .start()
            
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()
            
            if (exitCode == 0) {
                "‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:\n${output.take(500)}${if (output.length > 500) "..." else ""}"
            } else {
                "‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $exitCode):\n${output.take(500)}"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ $scriptPath: ${e.message}"
        }
    }
    
    fun disconnect() {
        stopScheduler()
        todoistManager.disconnect()
    }
}
