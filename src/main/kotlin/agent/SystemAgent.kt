package agent

import job.main as runJobMain
import mcp.TodoistManager
import mcp.McpManager
import kotlin.system.exitProcess
import java.io.File

class SystemAgent {
    private val todoistManager = TodoistManager()
    
    fun initialize() {
        val todoistApiKey = System.getenv("TODOIST_API_KEY")
        val todoistServerPath = System.getenv("TODOIST_MCP_SERVER_PATH")
        
        if (todoistApiKey != null) {
            todoistManager.initialize(todoistApiKey, todoistServerPath)
            println("ü§ñ –ê–≥–µ–Ω—Ç: Todoist –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }
    }
    
    fun executeCommand(command: String): String {
        return when {
            command.contains("–∑–∞–ø—É—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—É–¥—É–∏—Å—Ç–∞") || 
            command.contains("–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫") ||
            command.contains("–∑–∞–ø—É—Å—Ç–∏ –∑–∞–¥–∞—á–∏") -> {
                executeScheduler()
            }
            command.contains("–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã") ||
            command.contains("—Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞") -> {
                getSystemStatus()
            }
            command.contains("–Ω–∞—Å—Ç—Ä–æ–π —Å–∏—Å—Ç–µ–º—É") ||
            command.contains("–Ω–∞—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è") -> {
                configureSystem()
            }
            command.startsWith("–≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É:") -> {
                val cmd = command.removePrefix("–≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É:").trim()
                executeSystemCommand(cmd)
            }
            command.contains("–∑–∞–ø—É—Å—Ç–∏ –¥–µ–º–æ gradle") -> {
                executeDemoGradle()
            }
            command.contains("–∑–∞–ø—É—Å—Ç–∏ mcp —Ü–µ–ø–æ—á–∫—É") -> {
                executeMcpChain()
            }
            else -> "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º: $command"
        }
    }
    
    private fun executeScheduler(): String {
        return try {
            println("ü§ñ –ê–≥–µ–Ω—Ç: –ó–∞–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Todoist...")
            
            // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
            val tasks = todoistManager.getTasks(filter = "today")
            if (tasks.isNotEmpty()) {
                val tasksText = formatTasksForDisplay(tasks)
                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Todoist –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n$tasksText"
            } else {
                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Todoist –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${e.message}"
        }
    }
    
    private fun formatTasksForDisplay(tasks: List<Map<String, Any>>): String {
        return buildString {
            for (task in tasks) {
                val result = (task["result"] as? Map<*, *>)?.get("content") as? List<*>
                result?.forEach { taskData ->
                    if (taskData is Map<*, *>) {
                        val content = taskData["content"] as? String ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        val due = taskData["due"] as? String ?: ""
                        appendLine("- $content${if (due.isNotEmpty()) " ($due)" else ""}")
                    }
                }
            }
        }
    }
    
    private fun getSystemStatus(): String {
        return buildString {
            appendLine("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
            appendLine("‚Ä¢ Todoist: ${todoistManager.getStatus()}")
            appendLine("‚Ä¢ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${if (todoistManager.isMcpConnected()) "‚úÖ" else "‚ùå"}")
            appendLine("‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${todoistManager.getAvailableTools().joinToString(", ")}")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            val geminiKey = System.getenv("GEMINI_API_KEY")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            val todoistKey = System.getenv("TODOIST_API_KEY")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            val tgToken = System.getenv("TELEGRAM_BOT_TOKEN")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            val tgChatId = System.getenv("TELEGRAM_CHAT_ID")?.let { "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" } ?: "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            appendLine("‚Ä¢ GEMINI_API_KEY: $geminiKey")
            appendLine("‚Ä¢ TODOIST_API_KEY: $todoistKey")
            appendLine("‚Ä¢ TELEGRAM_BOT_TOKEN: $tgToken")
            appendLine("‚Ä¢ TELEGRAM_CHAT_ID: $tgChatId")
        }
    }
    
    private fun configureSystem(): String {
        return "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:\n" +
               "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n" +
               "- GEMINI_API_KEY\n" +
               "- TODOIST_API_KEY\n" +
               "- TELEGRAM_BOT_TOKEN\n" +
               "- TELEGRAM_CHAT_ID"
    }
    
    private fun executeSystemCommand(command: String): String {
        return try {
            println("ü§ñ –ê–≥–µ–Ω—Ç: –í—ã–ø–æ–ª–Ω—è—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É: $command")
            val process = ProcessBuilder(command.split(" "))
                .redirectErrorStream(true)
                .start()
            
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()
            
            if (exitCode == 0) {
                "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n$output"
            } else {
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $exitCode):\n$output"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${e.message}"
        }
    }
    
    private fun executeDemoGradle(): String {
        return executeShellScript("./demo_gradle.sh")
    }
    
    private fun executeMcpChain(): String {
        return executeShellScript("./demo_mcp_chain.sh")
    }
    
    private fun executeShellScript(scriptPath: String): String {
        return try {
            val file = File(scriptPath)
            if (!file.exists()) {
                return "‚ùå –°–∫—Ä–∏–ø—Ç $scriptPath –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
            
            val process = ProcessBuilder("bash", scriptPath)
                .redirectErrorStream(true)
                .start()
            
            val output = process.inputStream.bufferedReader().readText()
            val exitCode = process.waitFor()
            
            if (exitCode == 0) {
                "‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:\n${output.take(500)}${if (output.length > 500) "..." else ""}"
            } else {
                "‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $exitCode):\n${output.take(500)}"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ $scriptPath: ${e.message}"
        }
    }
    
    fun disconnect() {
        todoistManager.disconnect()
    }
}
