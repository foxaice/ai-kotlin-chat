package mcp

import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.io.File
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue

class TodoistMcp {
    private var isConnected = false
    private var process: Process? = null
    private var reader: BufferedReader? = null
    private var writer: BufferedWriter? = null
    private val json = jacksonObjectMapper()
    
    fun connect(todoistServerPath: String = "todoist-mcp-server"): Boolean {
        return try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ node
            val serverPath = if (todoistServerPath.endsWith(".js")) {
                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω .js —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ node
                "node"
            } else if (todoistServerPath.startsWith("/")) {
                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ .js —Ñ–∞–π–ª—É
                "node"
            } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º node
                "node"
            }
            
            val processBuilder = if (serverPath == "node") {
                // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ node
                val jsFile = if (todoistServerPath.endsWith(".js")) {
                    todoistServerPath
                } else {
                    "$todoistServerPath/dist/index.js"
                }
                ProcessBuilder("node", jsFile)
            } else {
                // –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª)
                ProcessBuilder(serverPath)
            }
            
            processBuilder.environment()["TODOIST_API_TOKEN"] = System.getenv("TODOIST_API_KEY") ?: ""
            
            process = processBuilder.start()
            reader = BufferedReader(InputStreamReader(process!!.inputStream))
            writer = BufferedWriter(OutputStreamWriter(process!!.outputStream))
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            val initRequest = mapOf(
                "jsonrpc" to "2.0",
                "id" to 1,
                "method" to "initialize",
                "params" to mapOf(
                    "protocolVersion" to "2024-11-05",
                    "capabilities" to emptyMap<String, Any>(),
                    "clientInfo" to mapOf(
                        "name" to "gemini-kotlin-chat",
                        "version" to "1.0"
                    )
                )
            )
            
            sendRequest(initRequest)
            val initResponse = readResponse()
            
            if (initResponse != null && !initResponse.containsKey("error")) {
                isConnected = true
                println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Todoist MCP —Å–µ—Ä–≤–µ—Ä—É")
                true
            } else {
                println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞")
                false
            }
        } catch (e: Exception) {
            e.printStackTrace()
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Todoist MCP —Å–µ—Ä–≤–µ—Ä—É: ${e.message}")
            false
        }
    }
    
    fun disconnect() {
        try {
            isConnected = false
            process?.destroy()
            reader?.close()
            writer?.close()
            println("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Todoist MCP —Å–µ—Ä–≤–µ—Ä–∞")
        } catch (e: Exception) {
            println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }
    
    fun getAvailableTools(): List<String> {
        return try {
            val request = mapOf(
                "jsonrpc" to "2.0",
                "id" to 2,
                "method" to "tools/list",
                "params" to emptyMap<String, Any>()
            )
            
            sendRequest(request)
            val response = readResponse()
            
            if (response != null && response.containsKey("result")) {
                val result = response["result"] as Map<*, *>
                val tools = result["tools"] as List<Map<*, *>>
                tools.mapNotNull { tool ->
                    tool["name"] as? String
                }
            } else {
                emptyList()
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${e.message}")
            emptyList()
        }
    }
    
    fun callTool(toolName: String, arguments: Map<String, Any>): Boolean {
        return try {
            val request = mapOf(
                "jsonrpc" to "2.0",
                "id" to System.currentTimeMillis().toInt(),
                "method" to "tools/call",
                "params" to mapOf(
                    "name" to toolName,
                    "arguments" to arguments
                )
            )
            
            sendRequest(request)
            val response = readResponse()
            
            if (response != null && response.containsKey("result")) {
                val result = response["result"] as Map<*, *>
                val isError = result["isError"] as? Boolean ?: false
                !isError
            } else {
                false
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ $toolName: ${e.message}")
            false
        }
    }
    
    private fun sendRequest(request: Map<String, Any>) {
        val jsonRequest = json.writeValueAsString(request)
        writer?.write(jsonRequest)
        writer?.newLine()
        writer?.flush()
    }
    
    private fun readResponse(): Map<String, Any>? {
        return try {
            val line = reader?.readLine()
            if (line != null) {
                json.readValue(line)
            } else {
                null
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${e.message}")
            null
        }
    }
    
    fun listProjects(): List<Map<String, Any>> {
        // MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API —á–µ—Ä–µ–∑ TodoistApiClient
        println("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ MCP –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π API")
        return emptyList()
    }
    
    fun listTasks(projectId: String? = null): List<Map<String, Any>> {
        val args = mutableMapOf<String, Any>()
        if (projectId != null) {
            args["project_id"] = projectId
        }
        
        val success = callTool("todoist_get_tasks", args)
        return if (success) {
            try {
                // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
                // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
                emptyList()
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞—á: ${e.message}")
                emptyList()
            }
        } else {
            emptyList()
        }
    }
    
    fun createTask(content: String, projectId: String? = null, dueDate: String? = null): Boolean {
        val args = mutableMapOf<String, Any>()
        args["content"] = content
        
        if (dueDate != null) {
            args["due_string"] = dueDate
        }
        
        return callTool("todoist_create_task", args)
    }
    
    fun completeTask(taskId: String): Boolean {
        // MCP —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∞ –Ω–µ ID
        // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        println("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ MCP –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        return false
    }
    
    fun completeTaskByName(taskName: String): Boolean {
        return callTool("todoist_complete_task", mapOf("task_name" to taskName))
    }
    
    fun updateTask(taskName: String, newContent: String? = null, newDueDate: String? = null, newPriority: Int? = null): Boolean {
        val args = mutableMapOf<String, Any>()
        args["task_name"] = taskName
        
        if (newContent != null) {
            args["content"] = newContent
        }
        if (newDueDate != null) {
            args["due_string"] = newDueDate
        }
        if (newPriority != null) {
            args["priority"] = newPriority
        }
        
        return callTool("todoist_update_task", args)
    }
    
    fun deleteTask(taskName: String): Boolean {
        return callTool("todoist_delete_task", mapOf("task_name" to taskName))
    }
    
    fun isConnected(): Boolean {
        return isConnected
    }
}
