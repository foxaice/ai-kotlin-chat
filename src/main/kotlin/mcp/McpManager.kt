package mcp

class McpManager {
    private val todoistMcp = TodoistMcp()
    private val telegramMcp = TelegramMcp()

    var isConnected = false
        private set

    fun connect(): Boolean {
        println("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º...")

        val todoistConnected = todoistMcp.connect()
        val telegramConnected = telegramMcp.connect()

        isConnected = todoistConnected && telegramConnected

        if (isConnected) {
            println("‚úÖ –û–±–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Todoist –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${todoistMcp.getAvailableTools()}")
            println("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${telegramMcp.getAvailableTools()}")
        } else {
            println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Å–µ MCP —Å–µ—Ä–≤–µ—Ä–∞")
            println("   - Todoist MCP: ${if (todoistConnected) "‚úÖ" else "‚ùå"}")
            println("   - Telegram MCP: ${if (telegramConnected) "‚úÖ" else "‚ùå"}")
        }

        return isConnected
    }

    fun disconnect() {
        println("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        todoistMcp.disconnect()
        telegramMcp.disconnect()
        isConnected = false
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ø–æ—á–∫–æ–π MCP:
     * 1. –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ Todoist —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–π MCP
     * 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ Telegram MCP
     */
    fun getTodayTasksAndSendToTelegram(): String {
        if (!isConnected) {
            return "‚ùå MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"
        }

        try {
            println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ Todoist...")

            // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Todoist
            val todayTasks = todoistMcp.listTasks(filter = "today")

            if (todayTasks.isEmpty()) {
                val noTasksMessage = "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚úÖ"
                telegramMcp.sendMessage(noTasksMessage)
                return noTasksMessage
            }

            println("üì§ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${todayTasks.size}")

            // –®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ –≤—Ç–æ—Ä–æ–π MCP
            val tasksJson = com.fasterxml.jackson.module.kotlin.jacksonObjectMapper()
                .writeValueAsString(todayTasks[0]) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

            println("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Telegram...")

            // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram MCP
            val success = telegramMcp.sendFormattedTasks(tasksJson)

            return if (success) {
                val message = "‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram"
                println(message)
                message
            } else {
                val message = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"
                println(message)
                message
            }

        } catch (e: Exception) {
            val message = "‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ MCP: ${e.message}"
            println(message)
            e.printStackTrace()
            return message
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ä—É—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    fun getTodayTasksWithCustomFormat(): String {
        if (!isConnected) {
            return "‚ùå MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
            val todayTasks = todoistMcp.listTasks(filter = "today")

            if (todayTasks.isEmpty()) {
                return "üéâ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
            val tasksJson = com.fasterxml.jackson.module.kotlin.jacksonObjectMapper()
                .writeValueAsString(todayTasks[0])

            val formattedText = telegramMcp.formatTaskList(tasksJson, "emoji")

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            val success = telegramMcp.sendMessage(formattedText)

            return if (success) {
                "‚úÖ –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:\n$formattedText"
            } else {
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
            }

        } catch (e: Exception) {
            return "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º
    fun getTodoistMcp(): TodoistMcp = todoistMcp
    fun getTelegramMcp(): TelegramMcp = telegramMcp
}
