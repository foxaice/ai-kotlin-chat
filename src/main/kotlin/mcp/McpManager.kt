package mcp

import runChat
import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

class McpManager {
    private var todoistMcp: TodoistMcp? = null
    private var isConnected = false

    fun connect(): Boolean {
        return try {
            todoistMcp = TodoistMcp()
            isConnected = todoistMcp?.connect() == true

            if (isConnected) {
                println("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            } else {
                println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º")
            }

            isConnected
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP: ${e.message}")
            false
        }
    }

    fun getTodayTasksAndSendToTelegram(): String {
        return if (isConnected && todoistMcp != null) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Todoist
                val tasks = todoistMcp!!.listTasks(filter = "today")

                if (tasks.isNotEmpty()) {
                    val rawTasksText = formatTasksForDisplay(tasks)
                    println("[McpManager] üìã –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á: $rawTasksText")

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Gemini –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    val geminiInput = """
                        –°–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –º–µ–Ω—è. –ü–µ—Ä–µ–¥–∞–≤–∞–π –º–Ω–µ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –∏ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ü–∏—Ç–∞—Ç—É,
                        —á—Ç–æ–±—ã –ª–µ–≥—á–µ –±—ã–ª–æ –≤—Å—Ç–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ - –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —ç—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞, 
                        —Å–¥–µ–ª–∞–π –≤–∏–¥ —á—Ç–æ —Ç—ã —Å–∞–º –µ—ë –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏ –Ω–∞–ø–∏—à–∏ –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–æ —Å–º–æ—Ç—Ä–µ–ª–æ—Å—å
                        –î–æ–±–∞–≤—å —ç–º–æ–¥–∂–∏ –∏ —Ç–µ–ø–ª–æ—Ç—ã)
                        –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á —ç–º–æ–¥–∂–∏ –Ω–µ –ø–∏—à—É—Ç—Å—è
                        –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –∫ –∑–∞–¥–∞—á–∞–º!!!!
                        –¢—ã –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—É–¥—É–∏—Å—Ç–∏–∫!
                        –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –ø–∏—à–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –£—á–∏—Ç—ã–≤–∞–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª!!!
                        
                        —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏:
                        - {–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏}{–≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç—å}
                        
                        –ø—É–Ω–∫—Ç –ø—Ä–æ –∑–∞–¥–∞—á–∏ –≤—ã–¥–µ–ª–∏ –∂–∏—Ä–Ω—ã–º
                        
                        –í–æ—Ç —Å–∞–º–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: $tasks
                    """.trimIndent()

                    println("[McpManager] ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Gemini...")
                    val formattedMessage = runChat(geminiInput)

                    println("[McpManager] üìù Gemini —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: ${formattedMessage.take(200)}...")

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                    val telegramResult = sendToTelegram(formattedMessage)

                    if (telegramResult.startsWith("‚úÖ")) {
                        "‚úÖ –û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —á–µ—Ä–µ–∑ Gemini:\n${formattedMessage.take(300)}..."
                    } else {
                        "‚ö†Ô∏è –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω Gemini, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:\n$telegramResult"
                    }
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Gemini
                    val noTasksInput = """
                        –°–æ–∑–¥–∞–π –¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
                        –£ –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ Todoist.
                        –î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.
                        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –∏ —Ç—ë–ø–ª—ã–π —Ç–æ–Ω.
                        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram, —É—á–∏—Ç—ã–≤–∞–π –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
                        –¢—ã –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—É–¥—É–∏—Å—Ç–∏–∫!
                    """.trimIndent()

                    val noTasksMessage = runChat(noTasksInput)
                    sendToTelegram(noTasksMessage)
                    "üìÖ –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                }
            } catch (e: Exception) {
                val errorMessage = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ MCP: ${e.message}"
                println("[McpManager] $errorMessage")
                try {
                    sendToTelegram("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏–∑ Todoist. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                } catch (telegramError: Exception) {
                    println("[McpManager] –¢–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: ${telegramError.message}")
                }
                errorMessage
            }
        } else {
            val errorMessage = "‚ùå MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            try {
                sendToTelegram("üîå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Todoist.")
            } catch (e: Exception) {
                println("[McpManager] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ Telegram: ${e.message}")
            }
            errorMessage
        }
    }

    private fun sendToTelegram(message: String): String {
        return try {
            val tgToken = System.getenv("TELEGRAM_BOT_TOKEN")
            val tgChatId = System.getenv("TELEGRAM_CHAT_ID")

            if (tgToken.isNullOrBlank() || tgChatId.isNullOrBlank()) {
                return "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã Telegram"
            }

            println("[McpManager] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")

            val chunks = message.chunked(3900) // Telegram limit
            for ((i, chunk) in chunks.withIndex()) {
                val success = sendTelegramMessage(tgToken, tgChatId, chunk)
                if (!success) {
                    return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ ${i + 1}/${chunks.size} –≤ Telegram"
                }
                if (chunks.size > 1) {
                    Thread.sleep(300) // Avoid flood limits
                }
            }

            println("[McpManager] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"

        } catch (e: Exception) {
            val error = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${e.message}"
            println("[McpManager] $error")
            error
        }
    }

    private fun sendTelegramMessage(token: String, chatId: String, text: String): Boolean {
        return try {
            val url = "https://api.telegram.org/bot$token/sendMessage"
            val form = "chat_id=${URLEncoder.encode(chatId, "UTF-8")}&text=${URLEncoder.encode(text, "UTF-8")}&parse_mode=Markdown"

            val u = URL(url)
            val conn = (u.openConnection() as HttpURLConnection).apply {
                requestMethod = "POST"
                doOutput = true
                setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
                connectTimeout = 15000
                readTimeout = 15000
            }

            conn.outputStream.use { os ->
                os.write(form.toByteArray(StandardCharsets.UTF_8))
            }

            val code = conn.responseCode

            if (code >= 300) {
                val err = conn.errorStream?.readBytes()?.toString(Charsets.UTF_8)
                println("[McpManager] Telegram HTTP $code: $err")
                false
            } else {
                true
            }
        } catch (e: Exception) {
            println("[McpManager] –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: ${e.message}")
            false
        }
    }

    private fun formatTasksForDisplay(tasks: List<Map<String, Any>>): String {
        return buildString {
            for (task in tasks) {
                val result = (task["result"] as? Map<*, *>)?.get("content") as? List<*>
                result?.forEach { taskData ->
                    if (taskData is Map<*, *>) {
                        val content = taskData["content"] as? String ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        val due = (taskData["due"] as? Map<*, *>)?.get("string") as? String ?: ""
                        val dueText = if (due.isNotEmpty()) " (—Å—Ä–æ–∫: $due)" else ""
                        appendLine("‚Ä¢ $content$dueText")
                    }
                }
            }

            if (isEmpty()) {
                append("–ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            }
        }
    }

    fun disconnect() {
        todoistMcp?.disconnect()
        isConnected = false
    }

    fun isConnected(): Boolean = isConnected
}