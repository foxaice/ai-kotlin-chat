package mcp

class McpManager {
    private var todoistMcp: TodoistMcp? = null
    private var isConnected = false

    fun connect(): Boolean {
        return try {
            todoistMcp = TodoistMcp()
            isConnected = todoistMcp?.connect() == true

            if (isConnected) {
                println("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            } else {
                println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º")
            }

            isConnected
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP: ${e.message}")
            false
        }
    }

    fun getTodayTasksAndSendToTelegram(): String {
        return if (isConnected && todoistMcp != null) {
            try {
                val tasks = todoistMcp!!.listTasks(filter = "today")
                if (tasks.isNotEmpty()) {
                    val tasksText = formatTasksForTelegram(tasks)
                    "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ MCP —Ü–µ–ø–æ—á–∫—É:\n$tasksText"
                } else {
                    "üìÖ –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }
            } catch (e: Exception) {
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ MCP: ${e.message}"
            }
        } else {
            "‚ùå MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        }
    }

    private fun formatTasksForTelegram(tasks: List<Map<String, Any>>): String {
        return buildString {
            for (task in tasks) {
                val result = (task["result"] as? Map<*, *>)?.get("content") as? List<*>
                result?.forEach { taskData ->
                    if (taskData is Map<*, *>) {
                        val content = taskData["content"] as? String ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        val due = taskData["due"] as? String ?: ""
                        appendLine("- $content${if (due.isNotEmpty()) " ($due)" else ""}")
                    }
                }
            }
        }
    }

    fun disconnect() {
        todoistMcp?.disconnect()
        isConnected = false
    }

    fun isConnected(): Boolean = isConnected
}