
package mcp

import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

class McpManager {
    private var todoistMcp: TodoistMcp? = null
    private var isConnected = false

    fun connect(): Boolean {
        return try {
            todoistMcp = TodoistMcp()
            isConnected = todoistMcp?.connect() == true

            if (isConnected) {
                println("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            } else {
                println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º")
            }

            isConnected
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP: ${e.message}")
            false
        }
    }

    fun getTodayTasksAndSendToTelegram(): String {
        return if (isConnected && todoistMcp != null) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Todoist
                val tasks = todoistMcp!!.listTasks(filter = "today")

                if (tasks.isNotEmpty()) {
                    val tasksText = formatTasksForTelegram(tasks)
                    println("[McpManager] üìã –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏: $tasksText")

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    val telegramResult = sendToTelegram(tasksText)

                    if (telegramResult.startsWith("‚úÖ")) {
                        "‚úÖ –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram —É—Å–ø–µ—à–Ω–æ:\n$tasksText"
                    } else {
                        "‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:\n$telegramResult\n\n–ó–∞–¥–∞—á–∏:\n$tasksText"
                    }
                } else {
                    val noTasksMessage = "üìÖ –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    sendToTelegram(noTasksMessage)
                    noTasksMessage
                }
            } catch (e: Exception) {
                val errorMessage = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ MCP: ${e.message}"
                println("[McpManager] $errorMessage")
                try {
                    sendToTelegram(errorMessage)
                } catch (telegramError: Exception) {
                    println("[McpManager] –¢–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: ${telegramError.message}")
                }
                errorMessage
            }
        } else {
            val errorMessage = "‚ùå MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            try {
                sendToTelegram(errorMessage)
            } catch (e: Exception) {
                println("[McpManager] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ Telegram: ${e.message}")
            }
            errorMessage
        }
    }

    private fun sendToTelegram(message: String): String {
        return try {
            val tgToken = System.getenv("TELEGRAM_BOT_TOKEN")
            val tgChatId = System.getenv("TELEGRAM_CHAT_ID")

            if (tgToken.isNullOrBlank() || tgChatId.isNullOrBlank()) {
                return "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã Telegram"
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            val formattedMessage = buildString {
                appendLine("üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!")
                appendLine("‚è∞ ${java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))}")
                appendLine()
                appendLine("üí≠ –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞!")
                appendLine()
                appendLine("**üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**")
                appendLine()
                append(message)
            }

            println("[McpManager] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")

            val chunks = formattedMessage.chunked(3900) // Telegram limit
            for ((i, chunk) in chunks.withIndex()) {
                val success = sendTelegramMessage(tgToken, tgChatId, chunk)
                if (!success) {
                    return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ ${i + 1}/${chunks.size} –≤ Telegram"
                }
                if (chunks.size > 1) {
                    Thread.sleep(300) // Avoid flood limits
                }
            }

            println("[McpManager] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"

        } catch (e: Exception) {
            val error = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${e.message}"
            println("[McpManager] $error")
            error
        }
    }

    private fun sendTelegramMessage(token: String, chatId: String, text: String): Boolean {
        return try {
            val url = "https://api.telegram.org/bot$token/sendMessage"
            val form = "chat_id=${URLEncoder.encode(chatId, "UTF-8")}&text=${URLEncoder.encode(text, "UTF-8")}&parse_mode=Markdown"

            val u = URL(url)
            val conn = (u.openConnection() as HttpURLConnection).apply {
                requestMethod = "POST"
                doOutput = true
                setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
                connectTimeout = 15000
                readTimeout = 15000
            }

            conn.outputStream.use { os ->
                os.write(form.toByteArray(StandardCharsets.UTF_8))
            }

            val code = conn.responseCode

            if (code >= 300) {
                val err = conn.errorStream?.readBytes()?.toString(Charsets.UTF_8)
                println("[McpManager] Telegram HTTP $code: $err")
                false
            } else {
                true
            }
        } catch (e: Exception) {
            println("[McpManager] –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: ${e.message}")
            false
        }
    }

    private fun formatTasksForTelegram(tasks: List<Map<String, Any>>): String {
        return buildString {
            for (task in tasks) {
                val result = (task["result"] as? Map<*, *>)?.get("content") as? List<*>
                result?.forEach { taskData ->
                    if (taskData is Map<*, *>) {
                        val content = taskData["content"] as? String ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        val due = (taskData["due"] as? Map<*, *>)?.get("string") as? String ?: ""
                        val dueText = if (due.isNotEmpty()) " *($due)*" else ""
                        appendLine("‚Ä¢ $content$dueText")
                    }
                }
            }

            if (isEmpty()) {
                append("üìù –ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π!")
            }
        }
    }

    fun disconnect() {
        todoistMcp?.disconnect()
        isConnected = false
    }

    fun isConnected(): Boolean = isConnected
}