#!/bin/bash

# Test Agent Runner Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
echo -e "${BLUE}"
echo "ü§ñ Test Agent Runner"
echo "===================="
echo -e "${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY
if [ -z "$GEMINI_API_KEY" ]; then
    log_error "GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo ""
    echo "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:"
    echo "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://makersuite.google.com/app/apikey"
    echo "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á"
    echo "3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ: export GEMINI_API_KEY=\"your-api-key-here\""
    echo ""
    exit 1
fi

log_success "GEMINI_API_KEY –Ω–∞–π–¥–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <source_file> [test_file] [package_name]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 Calculator.kt"
    echo "  $0 src/main/kotlin/Calculator.kt"
    echo "  $0 Calculator.kt test/CalculatorTest.kt"
    echo "  $0 Calculator.kt test/CalculatorTest.kt com.example"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "  $0 example  # –ó–∞–ø—É—Å–∫ —Å –ø—Ä–∏–º–µ—Ä–æ–º Calculator"
    exit 1
fi

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
if [ "$1" = "example" ]; then
    log_info "–ó–∞–ø—É—Å–∫ —Å –ø—Ä–∏–º–µ—Ä–æ–º Calculator..."

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    mkdir -p src/main/kotlin
    mkdir -p src/test/kotlin

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä Calculator.kt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f "src/main/kotlin/Calculator.kt" ]; then
        log_info "–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä Calculator.kt..."
        cat > src/main/kotlin/Calculator.kt << 'EOF'
package com.example

import kotlin.math.*

class Calculator {

    fun add(a: Double, b: Double): Double = a + b

    fun subtract(a: Double, b: Double): Double = a - b

    fun multiply(a: Double, b: Double): Double = a * b

    fun divide(a: Double, b: Double): Double {
        if (b == 0.0) {
            throw IllegalArgumentException("Division by zero is not allowed")
        }
        return a / b
    }

    fun power(base: Double, exponent: Double): Double = base.pow(exponent)

    fun sqrt(number: Double): Double {
        if (number < 0) {
            throw IllegalArgumentException("Cannot calculate square root of negative number")
        }
        return sqrt(number)
    }

    fun factorial(n: Int): Long {
        if (n < 0) throw IllegalArgumentException("Factorial is not defined for negative numbers")
        if (n <= 1) return 1L
        return (2..n).fold(1L) { acc, i -> acc * i }
    }

    fun isPrime(number: Int): Boolean {
        if (number < 2) return false
        if (number == 2) return true
        if (number % 2 == 0) return false

        val limit = sqrt(number.toDouble()).toInt()
        for (i in 3..limit step 2) {
            if (number % i == 0) return false
        }
        return true
    }
}
EOF
        log_success "Calculator.kt —Å–æ–∑–¥–∞–Ω"
    fi

    SOURCE_FILE="src/main/kotlin/Calculator.kt"
    TEST_FILE="src/test/kotlin/CalculatorTest.kt"
    PACKAGE="com.example"
else
    SOURCE_FILE="$1"
    TEST_FILE="${2:-}"
    PACKAGE="${3:-}"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if [ ! -f "$SOURCE_FILE" ]; then
    log_error "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $SOURCE_FILE"
    exit 1
fi

log_info "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: $SOURCE_FILE"
log_info "–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤: ${TEST_FILE:-–∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è}"
log_info "–ü–∞–∫–µ—Ç: ${PACKAGE:-–∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ}"

echo ""

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
log_info "–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞..."
if ./gradlew compileKotlin > /dev/null 2>&1; then
    log_success "–ü—Ä–æ–µ–∫—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω"
else
    log_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
log_info "–ó–∞–ø—É—Å–∫ Test Agent..."
echo ""

if [ -n "$TEST_FILE" ] && [ -n "$PACKAGE" ]; then
    ./gradlew runAgent -PappArgs="$SOURCE_FILE $TEST_FILE $PACKAGE" --quiet
elif [ -n "$TEST_FILE" ]; then
    ./gradlew runAgent -PappArgs="$SOURCE_FILE $TEST_FILE" --quiet
else
    ./gradlew runAgent -PappArgs="$SOURCE_FILE" --quiet
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ -n "$TEST_FILE" ] && [ -f "$TEST_FILE" ]; then
    log_success "–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ: $TEST_FILE"
    echo ""
    log_info "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."

    if ./gradlew test --tests "*$(basename ${TEST_FILE%.*})" > /dev/null 2>&1; then
        log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ"
    else
        log_warning "–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ './gradlew test' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    fi

    echo ""
    echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    echo "-----------------------------------"
    head -20 "$TEST_FILE"
    if [ $(wc -l < "$TEST_FILE") -gt 20 ]; then
        echo "... (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫)"
    fi

else
    log_warning "–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω"
fi

echo ""
log_info "–ì–æ—Ç–æ–≤–æ!"